import pygamefrom pygame.locals import *from sys import exitimport osfrom time import *from threades import *import threadesimport threadingimport guifrom gui import *import defaultStylefrom animation_view import *original_screen_size = (1200.0,900.0)new_screen_size = (1200.0,900.0)def blend_color(color1, color2, blend_factor):    red1, green1, blue1 = color1    red2, green2, blue2 = color2    red = red1+(red2-red1)*blend_factor    green = green1+(green2-green1)*blend_factor    blue = blue1+(blue2-blue1)*blend_factor    return (int(red), int(green), int(blue))def resize_pos(original_pos,original_size = original_screen_size,new_size = new_screen_size):    ratio_x = original_pos[0]/original_size[0]     ratio_y = original_pos[1]/original_size[1]     new_pos = (int(new_size[0]*ratio_x),int(new_size[1]*ratio_y))    return new_posdef resize_rect(original_rect,original_size = original_screen_size,new_size = new_screen_size):    ratio_x = new_size[0]/original_size[0]     ratio_y = new_size[1]/original_size[1]     new_rect = (int(original_rect[0]*ratio_x),int(original_rect[1]*ratio_y),int(original_rect[2]*ratio_x),int(original_rect[3]*ratio_y))    return new_rectclass bar:    color_bar = (47,47,255)    def __init__(self, surface, x_value, y_value):        ''' Draws a bar on the surface at posn x,y        '''        self.x = x_value        self.y = y_value        pygame.draw.rect(surface,self.color_bar,(self.x,self.y,250,18),2)        pygame.draw.rect(surface,(255,255,255),(self.x+2,self.y+2,246,11))    def update_value(self,surface,value):        '''Updates the value of the bar        '''        max_value = 100.0        max_pixel = 246.0        red = (255,57,57)        green = (90,255,90)        colour = blend_color(red,green,value/max_value)        pygame.draw.rect(surface,colour,(self.x+2,self.y+2,value/max_value*max_pixel,14))        pygame.draw.rect(surface,(255,255,255),(self.x+2+value/max_value*max_pixel,self.y+2,max_pixel-value/max_value*max_pixel,14))class indicator_panel:    font_bg_color = (0,0,0)       # This should be same as  the background colour for the label    font_color = (160,160,160)    # This should be same as that for the font to be written on the label    def __init__(self,surface):        ''' Draws the indicator panel on the surface        '''        myfont1 = pygame.font.SysFont("arial", 42)   # For main heading        myfont2 = pygame.font.SysFont("arial", 25)   # For indicators name        # Creating a custom label style        self.labelstyle1 = gui.defaultLabelStyle.copy()        self.labelstyle1['border-width'] = 1        self.labelstyle1['wordwrap'] = True        self.labelstyle1['autosize'] = False        self.labelstyle1['font'] = myfont1        self.labelstyle1['font-color'] = self.font_color        self.labelstyle1['border-color'] = self.font_color        # Drawing main Indicator label        label = Label(position = (900,600),size = (300,45), parent = desktop, text = "          Indicators", style = self.labelstyle1)        pygame.draw.line(surface,self.font_color,(900,45),(900,300),1)        # Creating second custom label        self.labelstyle2 = gui.defaultLabelStyle.copy()        self.labelstyle2['border-width'] = 0        self.labelstyle2['wordwrap'] = True        self.labelstyle2['autosize'] = False        self.labelstyle2['font'] = myfont2        self.labelstyle2['font-color'] = self.font_color        self.labelstyle2['border-color'] = self.font_color        # Drawing all the indicators        ind_namelist = (' Housing',' Nutrition',' Health',' Education',' Training')        # Empty Dictionary for bar        self.bar_dict = {}        for i in range(5):            label = Label(position = (900,650+50*i),size = (300,25), parent = desktop, text = ind_namelist[i], style = self.labelstyle2)            self.bar_dict[i] = bar(surface,902,77+i*50)            text_surface = myfont2.render(str(0)+'%',True,self.font_color,self.font_bg_color)            surface.blit(text_surface,(1160,77+i*50))    def update_value(self,surface):        ''' Updates the values of all the indicators        '''        myfont2 = pygame.font.SysFont("arial", 25)        for i in range(5):            self.bar_dict[i].update_value(surface,indicators_list[i].get_value())            pygame.draw.rect(surface,self.font_bg_color,(1160,77+i*50,40,30))            text_surface = myfont2.render(str(int(indicators_list[i].get_value()))+'%',True,self.font_color,self.font_bg_color)            surface.blit(text_surface,(1160,77+i*50))class resources_panel:    font_bg_color = (0,0,0)       # This should be same as  the background colour for the label    font_color = (160,160,160)    # This should be same as that for the font to be written on the label    def __init__(self,surface):        ''' Draws the resources panel on the surface        '''        myfont1 = pygame.font.SysFont("arial", 42)   # For main heading        myfont2 = pygame.font.SysFont("arial", 28)   # For resources name and their value        # Creating a custom label style        self.labelstyle1 = gui.defaultLabelStyle.copy()        self.labelstyle1['border-width'] = 1        self.labelstyle1['wordwrap'] = True        self.labelstyle1['autosize'] = False        self.labelstyle1['font'] = myfont1        self.labelstyle1['font-color'] = self.font_color        self.labelstyle1['border-color'] = self.font_color        pygame.draw.line(surface,self.font_color,(400,45),(400,255),1)        # Drawing main Resources rectangle        label = Label(position = (400,600),size = (500,45), parent = desktop, text = "                    Resources", style = self.labelstyle1)        # Creating second label style        self.labelstyle2 = gui.defaultLabelStyle.copy()        self.labelstyle2['border-width'] = 0        self.labelstyle2['wordwrap'] = True        self.labelstyle2['autosize'] = False        self.labelstyle2['font'] = myfont2        self.labelstyle2['font-color'] = self.font_color        self.labelstyle2['border-color'] = self.font_color        # Drawing general resources list        list_gen_res = (' Water',' Building Material',' Tools',' Medicines',' Books')        for i in range(5):            label = Label(position = (400,645+35*i),size = (200,35), parent = desktop, text = list_gen_res[i], style = self.labelstyle2)            text_surface2 = myfont2.render(str(int(resources[i].get_vquantity())),True,self.font_color,self.font_bg_color)            surface.blit(text_surface2,(605,49+i*35))        # Drawing food resources list        list_food_res = (' Rice',' Wheat',' Beans',' Sugar',' Salt',' Oils')        for i in range(6):            label = Label(position = (650,645+35*i),size = (200,35), parent = desktop, text = list_food_res[i], style = self.labelstyle2)            text_surface2 = myfont2.render(str(int(resources[5+i].get_vquantity())),True,self.font_color,self.font_bg_color)            surface.blit(text_surface2,(855,49+i*35))    def update_value(self,surface):        ''' Updates the resources panel        '''        myfont1 = pygame.font.SysFont("arial", 42)   # For main heading        myfont2 = pygame.font.SysFont("arial", 25)   # For resources name and their value        # Updating general resources list        for i in range(5):            pygame.draw.rect(surface,self.font_bg_color,(600,45+i*35,55,35))            text_surface2 = myfont2.render(str(int(resources[i].get_vquantity())),True,self.font_color,self.font_bg_color)            surface.blit(text_surface2,(605,49+i*35))        # Updating food resources list        for i in range(6):            pygame.draw.rect(surface,self.font_bg_color,(850,45+i*35,50,35))            text_surface2 = myfont2.render(str(int(resources[5+i].get_vquantity())),True,self.font_color,self.font_bg_color)            surface.blit(text_surface2,(855,49+i*35))        pygame.draw.line(surface,self.font_color,(650,45),(650,255),1)class manpower_panel:    font_bg_color = (0,0,0)       # This should be same as  the background colour for the label    font_color = (160,160,160)    # This should be same as that for the font to be written on the label    def __init__(self,surface):        ''' Draws the manpower panel        '''        myfont1 = pygame.font.SysFont("arial", 42)   # For main heading        myfont2 = pygame.font.SysFont("arial", 28)   # For resources name and their value        # Creating a custom label style        self.labelstyle1 = gui.defaultLabelStyle.copy()        self.labelstyle1['border-width'] = 1        self.labelstyle1['wordwrap'] = True        self.labelstyle1['autosize'] = False        self.labelstyle1['font'] = myfont1        self.labelstyle1['font-color'] = self.font_color        self.labelstyle1['border-color'] = self.font_color        # Drawing main Manpower Resources rectangle        label = Label(position = (0,600),size = (400,45), parent = desktop, text = "      Manpower Distribution", style = self.labelstyle1)        # Creating second label style        self.labelstyle2 = gui.defaultLabelStyle.copy()        self.labelstyle2['border-width'] = 0        self.labelstyle2['wordwrap'] = True        self.labelstyle2['autosize'] = False        self.labelstyle2['font'] = myfont2        self.labelstyle2['font-color'] = self.font_color        self.labelstyle2['border-color'] = self.font_color        # Drawing Manpower resources list        list_names = (' Total Population',' Sheltered People',' Educated People',' Healthy People',' People Fed',' No. of People Employed')        list_values = (ppl.get_total_population(),ppl.get_no_of_ppl_sheltered(),ppl.get_no_of_ppl_educated(),ppl.get_no_of_ppl_healthy(),ppl.get_no_of_ppl_fed(),ppl.get_total_no_of_ppl_emp())        pygame.draw.rect(surface,self.font_color,(0,255,300,45),1)                pygame.draw.rect(surface,self.font_color,(300,255,300,45),1)                pygame.draw.rect(surface,self.font_color,(600,255,300,45),1)                        for i in range(6):            label = Label(position = (0,645+35*i),size = (350,35), parent = desktop, text = list_names[i], style = self.labelstyle2)            text_surface2 = myfont2.render(str(int(list_values[i])),True,self.font_color,self.font_bg_color)            surface.blit(text_surface2,(355,49+i*35))    def update_value(self,surface):        ''' Updates the Manpower panel        '''        myfont2 = pygame.font.SysFont("arial", 25)   # For subheadings        list_values = (ppl.get_total_population(),ppl.get_no_of_ppl_sheltered(),ppl.get_no_of_ppl_educated(),ppl.get_no_of_ppl_healthy(),ppl.get_no_of_ppl_fed(),ppl.get_total_no_of_ppl_emp())        for i in range(6):            pygame.draw.rect(surface,self.font_bg_color,(350,45+i*35,50,35))            text_surface2 = myfont2.render(str(int(list_values[i])),True,self.font_color,self.font_bg_color)            surface.blit(text_surface2,(355,49+i*35))class display_panel:    def __init__(self,surface):        self.ind = indicator_panel(surface)        self.res = resources_panel(surface)        self.man = manpower_panel(surface)        self.button = gui_buttons()    def update(self,surface):        self.ind.update_value(surface)        self.res.update_value(surface)        self.man.update_value(surface)class gui_buttons:    rect_color = (160,160,160)    def __init__(self):        ''' Initialises the buttons for setting up facility, upgrading it and for buy/sell operations        '''        myfont = pygame.font.SysFont("arial", 20)        button_style = gui.defaultButtonStyle.copy()        button_style['font'] = myfont        self.setup_button = Button(position = (50,865), size = (200,25), parent = desktop, text = "Setup Facility",style = button_style)        self.upgrade_button = Button(position = (350,865), size = (200,25), parent = desktop, text = "Upgrade Facility",style = button_style)        self.buysell_button = Button(position = (650,865), size = (200,25), parent = desktop, text = "Buy/Sell Resources",style = button_style)        self.setup_button.onClick = self.setup        self.upgrade_button.onClick = self.upgrade        self.buysell_button.onClick = self.buysell            def disable_buttons(self):        self.setup_button.enabled = False        self.upgrade_button.enabled = False        self.buysell_button.enabled = False            def enable_buttons(self):        resume_update_thread()        self.setup_button.enabled = True        self.upgrade_button.enabled = True        self.buysell_button.enabled = True                            # Functions for setting up a facility begin    def setup(self,button):        ''' Initiated when the button for setting up a facility is clicked        '''        self.disable_buttons()        myfont = pygame.font.SysFont("arial", 30)        # Custom Window Style        win_style = gui.defaultWindowStyle.copy()        win_style['font'] = myfont        win_style['font-color'] = self.rect_color        win_style['bg-color'] = (0,0,0)        # Calculating position and size of window from the size of the desktop                position_win =resize_pos((200.0,150.0))        size_win =resize_pos((800.0,600.0))        # Creating window        self.win = Window(position = position_win, size = size_win, parent = desktop, text = "Setup Facility " ,style = win_style)        self.win.surf.set_alpha(140)         self.win.onClose = lambda button: self.enable_buttons()                #  Creating Custom label style        myfont2 = pygame.font.SysFont("arial", 23)        labelStyleCopy = gui.defaultLabelStyle.copy()        labelStyleCopy['border-width'] = 1        labelStyleCopy['wordwrap'] = True        labelStyleCopy['autosize'] = False        labelStyleCopy['font'] = myfont2        labelStyleCopy['font-color'] = self.rect_color        labelStyleCopy['border-color'] = self.rect_color        default_text = 'Please select a Facility and press setup button for setting up the facility.'        self.message_label = Label(position = resize_pos((450,150),(800.0,600.0),self.win.size),size = resize_pos((200,100),(800.0,600.0),self.win.size), parent = self.win, text = default_text, style = labelStyleCopy)                        # creating custom style for option box        op_style = gui.defaultOptionBoxStyle.copy()        op_style['font'] = myfont        op_style['font-color'] = self.rect_color        op_style['autosize'] = True        op_style['word wrap'] = False        # Creating option boxes for all the facilities        position_optionbox = resize_pos((200.0,150.0),(800.0,600.0),size_win)                self.housing_box = OptionBox(position = position_optionbox, parent = self.win, style = op_style, text = 'House')        self.housing_box.onClick =  self.on_select_setup_option_box        self.hospital_box = OptionBox(position = self.win.nextPosition(10), parent = self.win, style = op_style, text = 'Hospital')        self.hospital_box.onClick = self.on_select_setup_option_box        self.workshop_box = OptionBox(position = self.win.nextPosition(10), parent = self.win, style = op_style, text = 'Workshop')        self.workshop_box.onClick = self.on_select_setup_option_box        self.school_box = OptionBox(position = self.win.nextPosition(10), parent = self.win, style = op_style, text = 'School')        self.school_box.onClick = self.on_select_setup_option_box        self.farm_box = OptionBox(position = self.win.nextPosition(10), parent = self.win, style = op_style, text = 'Farm')        self.farm_box.onClick = self.on_select_setup_option_box        self.fountain_box = OptionBox(position = self.win.nextPosition(10), parent = self.win, style = op_style, text = 'Fountain')        self.fountain_box.onClick = self.on_select_setup_option_box                        # Creating buttons for Setting up the facility and closing the setup window        button_style = gui.defaultButtonStyle.copy()        button_style['font'] = myfont2        self.button_setup = Button(position = resize_pos((600.0,400.0),(800.0,600.0),size_win), size = resize_pos((120.0,50.0),(800.0,600.0),size_win), parent = self.win, text = "Setup",style = button_style)        self.button_close = Button(position = resize_pos((600.0,460.0),(800.0,600.0),size_win), size = resize_pos((120.0,50.0),(800.0,600.0),size_win), parent = self.win, text = "Close",style = button_style)        self.button_close.onClick  = self.close_win        self.button_setup.onClick = self.setup_facility        def on_select_setup_option_box(self,button):        self.message_label.text = 'Sets up another ' + button.text        pass    def close_win(self,button):        self.win.close()        self.enable_buttons()            def setup_facility(self,button):        ''' Sets up the facility        '''                       if self.housing_box.value:            label_text =  build_facility(House)        elif self.hospital_box.value:            label_text =  build_facility(Hospital)        elif self.workshop_box.value:            label_text =  build_facility(Workshop)        elif self.fountain_box.value:            label_text =  build_facility(Fountain)        elif self.school_box.value:            label_text =  build_facility(School)        elif self.farm_box.value:            label_text =  self.build_facility_farm()        else:            label_text = ' Please select a Facility for building'        self.message_label.text = label_text            def build_facility_farm(self):                # To be done yet..........        return 'to be done'                            # Functions for setting up a facility end here.....        # Functions for upgrading a facility    def upgrade(self,button):        ''' Initiated when the button for upgrading a facility is clicked        '''        self.disable_buttons()        myfont = pygame.font.SysFont("arial", 30)        # Custom Window Style        win_style = gui.defaultWindowStyle.copy()        win_style['font'] = myfont        win_style['font-color'] = self.rect_color        win_style['bg-color'] = (0,0,0)        # Calculating position and size of window from the size of the desktop                position_win =resize_pos((200.0,150.0))        size_win =resize_pos((800.0,600.0))        # Creating window        self.win = Window(position = position_win, size = size_win, parent = desktop, text = "Upgrade Facility " ,style = win_style)        self.win.surf.set_alpha(140)         self.win.onClose = lambda button: self.enable_buttons()                #  Creating Custom label style        myfont2 = pygame.font.SysFont("arial", 23)        labelStyleCopy = gui.defaultLabelStyle.copy()        labelStyleCopy['border-width'] = 1        labelStyleCopy['wordwrap'] = True        labelStyleCopy['autosize'] = False        labelStyleCopy['font'] = myfont2        labelStyleCopy['font-color'] = self.rect_color        labelStyleCopy['border-color'] = self.rect_color        text = 'Please select a Facility and press Upgrade button for upgrading the facility.'        self.message_label = Label(position = resize_pos((450,150),(800.0,600.0),self.win.size),size = resize_pos((200,100),(800.0,600.0),self.win.size), parent = self.win, text = text, style = labelStyleCopy)                        # creating custom style for option box        op_style = gui.defaultOptionBoxStyle.copy()        op_style['font'] = myfont        op_style['font-color'] = self.rect_color        op_style['autosize'] = True        op_style['word wrap'] = False        # Creating option boxes for all the facilities        position_optionbox = resize_pos((200.0,150.0),(800.0,600.0),size_win)                self.housing_box = OptionBox(position = position_optionbox, parent = self.win, style = op_style, text = 'House')        self.housing_box.onClick =  self.on_select_upgrade_option_box        self.hospital_box = OptionBox(position = self.win.nextPosition(10), parent = self.win, style = op_style, text = 'Hospital')        self.hospital_box.onClick = self.on_select_upgrade_option_box        self.workshop_box = OptionBox(position = self.win.nextPosition(10), parent = self.win, style = op_style, text = 'Workshop')        self.workshop_box.onClick = self.on_select_upgrade_option_box        self.school_box = OptionBox(position = self.win.nextPosition(10), parent = self.win, style = op_style, text = 'School')        self.school_box.onClick = self.on_select_upgrade_option_box        self.farm_box = OptionBox(position = self.win.nextPosition(10), parent = self.win, style = op_style, text = 'Farm')        self.farm_box.onClick = self.on_select_upgrade_option_box        self.fountain_box = OptionBox(position = self.win.nextPosition(10), parent = self.win, style = op_style, text = 'Fountain')        self.fountain_box.onClick = self.on_select_upgrade_option_box                        # Creating buttons for Setting up the facility and closing the setup window        button_style = gui.defaultButtonStyle.copy()        button_style['font'] = myfont2        self.button_upgrade = Button(position = resize_pos((600.0,400.0),(800.0,600.0),size_win), size = resize_pos((120.0,50.0),(800.0,600.0),size_win), parent = self.win, text = "Upgrade",style = button_style)        self.button_close = Button(position = resize_pos((600.0,460.0),(800.0,600.0),size_win), size = resize_pos((120.0,50.0),(800.0,600.0),size_win), parent = self.win, text = "Close",style = button_style)        self.button_close.onClick  = self.close_win        self.button_upgrade.onClick = self.upgrade_facility        def on_select_upgrade_option_box(self,button):        self.message_label.text = 'Upgrades ' + button.text        pass    def close_setup_win(self,button):        resume_update_thread()        self.win.close()        self.enable_buttons()            def upgrade_facility(self,button):        ''' Upgrades the facility        '''                       if self.housing_box.value:            label_text =  upgrade_facility(House)        elif self.hospital_box.value:            label_text =  upgrade_facility(Hospital)        elif self.workshop_box.value:            label_text =  upgrade_facility(Workshop)        elif self.fountain_box.value:            label_text =  upgrade_facility(Fountain)        elif self.school_box.value:            label_text =  upgrade_facility(School)        elif self.farm_box.value:            label_text =  upgrade_facility(Farm)        else:            label_text = ' Please select a Facility for Upgrading'        self.message_label.text = label_text        # Functions for upgrading a facility end here........                        # Functions for Buy/Sell operation begin here    def buysell(self,button):        ''' Initiated when the button for buy/sell operation is pressed......        '''            self.disable_buttons()        myfont = pygame.font.SysFont("arial", 30)                # Custom Window Style        win_style = gui.defaultWindowStyle.copy()        win_style['font'] = myfont        win_style['font-color'] = self.rect_color        win_style['bg-color'] = (0,0,0)                # Focus the animation window on the market        animation_obj.focus_at((5500,2000)) # Replace this with the coordinates of the market in the base surface        # Calculating position and size of window from the size of the desktop                position_win =resize_pos((200.0,150.0))        size_win =resize_pos((800.0,600.0))        # Creating window        self.win = Window(position = position_win, size = size_win, parent = desktop, text = " Buy or Sell Resources " ,style = win_style)        self.win.surf.set_alpha(140)         self.win.onClose = lambda button: self.enable_buttons()                # Pausing the update thread        pause_update_thread()                # Creating custom label style1        myfont2 = pygame.font.SysFont("arial", 25)        labelstyle1 = gui.defaultLabelStyle.copy()        labelstyle1['border-width'] = 0        labelstyle1['wordwrap'] = False        labelstyle1['autosize'] = True        labelstyle1['font'] = myfont2        labelstyle1['font-color'] = self.rect_color                heading_label1 = Label(position = resize_pos((10.0,70.0),(800.0,600.0),self.win.size), parent = self.win, text = 'Resources', style = labelstyle1)        heading_label2 = Label(position = resize_pos((180.0,70.0),(800.0,600.0),self.win.size), parent = self.win, text = 'Village', style = labelstyle1)        heading_label3 = Label(position = resize_pos((180.0,85.0),(800.0,600.0),self.win.size), parent = self.win, text = 'Quantity', style = labelstyle1)        heading_label4 = Label(position = resize_pos((280.0,70.0),(800.0,600.0),self.win.size), parent = self.win, text = 'Price', style = labelstyle1)        heading_label5 = Label(position = resize_pos((520.0,70.0),(800.0,600.0),self.win.size), parent = self.win, text = 'Resources', style = labelstyle1)        heading_label6 = Label(position = resize_pos((700.0,70.0),(800.0,600.0),self.win.size), parent = self.win, text = 'Market', style = labelstyle1)        heading_label7 = Label(position = resize_pos((700.0,85.0),(800.0,600.0),self.win.size), parent = self.win, text = 'Quantity', style = labelstyle1)                # creating custom style for option box        op_style = gui.defaultOptionBoxStyle.copy()        op_style['font'] = myfont2        op_style['font-color'] = self.rect_color        op_style['autosize'] = True        op_style['word wrap'] = False                # Creating option boxes for all the resources        position_optionbox = resize_pos((10.0,140.0),(800.0,600.0),self.win.size)                self.water_box = OptionBox(position = position_optionbox, parent = self.win, style = op_style, text = 'Water')        self.buildmat_box = OptionBox(position = self.win.nextPosition(5), parent = self.win, style = op_style, text = 'Building Material')        self.tools_box = OptionBox(position = self.win.nextPosition(5), parent = self.win, style = op_style, text = 'Tools')        self.books_box = OptionBox(position = self.win.nextPosition(5), parent = self.win, style = op_style, text = 'Books')        self.medicine_box = OptionBox(position = self.win.nextPosition(5), parent = self.win, style = op_style, text = 'Medicines')        self.rice_box = OptionBox(position = self.win.nextPosition(5), parent = self.win, style = op_style, text = 'Rice')        self.wheat_box = OptionBox(position = self.win.nextPosition(5), parent = self.win, style = op_style, text = 'Wheat')        self.beans_box = OptionBox(position = self.win.nextPosition(5), parent = self.win, style = op_style, text = 'Beans')        self.sugar_box = OptionBox(position = self.win.nextPosition(5), parent = self.win, style = op_style, text = 'Sugar')        self.salt_box = OptionBox(position = self.win.nextPosition(5), parent = self.win, style = op_style, text = 'Salt')        self.oil_box = OptionBox(position = self.win.nextPosition(5), parent = self.win, style = op_style, text = 'Oils')                        # Creating labels for village values of Resources         self.label_vwater = Label(position = resize_pos((190.0,140.0),(800.0,600.0),self.win.size), parent = self.win, text = str(int(Water.get_vquantity())), style = labelstyle1)        self.label_vbuildmat = Label(position = self.win.nextPosition(5), parent = self.win, text = str(int(Buildmat.get_vquantity())), style = labelstyle1)        self.label_vtools = Label(position = self.win.nextPosition(5), parent = self.win, text = str(int(Tools.get_vquantity())), style = labelstyle1)        self.label_vbooks = Label(position = self.win.nextPosition(5), parent = self.win, text = str(int(Book.get_vquantity())), style = labelstyle1)        self.label_vmedicine = Label(position = self.win.nextPosition(5), parent = self.win, text = str(int(Medicine.get_vquantity())), style = labelstyle1)        self.label_vrice = Label(position = self.win.nextPosition(5), parent = self.win, text = str(int(Rice.get_vquantity())), style = labelstyle1)        self.label_vwheat = Label(position = self.win.nextPosition(5), parent = self.win, text = str(int(Wheat.get_vquantity())), style = labelstyle1)        self.label_vbeans = Label(position = self.win.nextPosition(5), parent = self.win, text = str(int(Beans.get_vquantity())), style = labelstyle1)        self.label_vsugar = Label(position = self.win.nextPosition(5), parent = self.win, text = str(int(Sugar.get_vquantity())), style = labelstyle1)        self.label_vsalt = Label(position = self.win.nextPosition(5), parent = self.win, text = str(int(Salt.get_vquantity())), style = labelstyle1)        self.label_voil = Label(position = self.win.nextPosition(5), parent = self.win, text = str(int(Oil.get_vquantity())), style = labelstyle1)                        # Creating labels for prices of Resources         self.price_vwater = Label(position = resize_pos((280.0,140.0),(800.0,600.0),self.win.size), parent = self.win, text = str(int(Water.get_price())), style = labelstyle1)        self.price_vbuildmat = Label(position = self.win.nextPosition(5), parent = self.win, text = str(int(Buildmat.get_price())), style = labelstyle1)        self.price_vtools = Label(position = self.win.nextPosition(5), parent = self.win, text = str(int(Tools.get_price())), style = labelstyle1)        self.price_vbooks = Label(position = self.win.nextPosition(5), parent = self.win, text = str(int(Book.get_price())), style = labelstyle1)        self.price_vmedicine = Label(position = self.win.nextPosition(5), parent = self.win, text = str(int(Medicine.get_price())), style = labelstyle1)        self.price_vrice = Label(position = self.win.nextPosition(5), parent = self.win, text = str(int(Rice.get_price())), style = labelstyle1)        self.price_vwheat = Label(position = self.win.nextPosition(5), parent = self.win, text = str(int(Wheat.get_price())), style = labelstyle1)        self.price_vbeans = Label(position = self.win.nextPosition(5), parent = self.win, text = str(int(Beans.get_price())), style = labelstyle1)        self.price_vsugar = Label(position = self.win.nextPosition(5), parent = self.win, text = str(int(Sugar.get_price())), style = labelstyle1)        self.price_vsalt = Label(position = self.win.nextPosition(5), parent = self.win, text = str(int(Salt.get_price())), style = labelstyle1)        self.price_voil = Label(position = self.win.nextPosition(5), parent = self.win, text = str(int(Oil.get_price())), style = labelstyle1)                        # Creating labels for name of Resources for the market        self.water_label = Label(position = resize_pos((520.0,140.0),(800.0,600.0),self.win.size), parent = self.win, style = labelstyle1, text = 'Water')        self.buildmat_label = Label(position = self.win.nextPosition(5), parent = self.win, style = labelstyle1, text = 'Building Material')        self.tools_label = Label(position = self.win.nextPosition(5), parent = self.win, style = labelstyle1, text = 'Tools')        self.books_label = Label(position = self.win.nextPosition(5), parent = self.win, style = labelstyle1, text = 'Books')        self.medicine_label = Label(position = self.win.nextPosition(5), parent = self.win, style = labelstyle1, text = 'Medicines')        self.rice_label = Label(position = self.win.nextPosition(5), parent = self.win, style = labelstyle1, text = 'Rice')        self.wheat_label = Label(position = self.win.nextPosition(5), parent = self.win, style = labelstyle1, text = 'Wheat')        self.beans_label = Label(position = self.win.nextPosition(5), parent = self.win, style = labelstyle1, text = 'Beans')        self.sugar_label = Label(position = self.win.nextPosition(5), parent = self.win, style = labelstyle1, text = 'Sugar')        self.salt_label = Label(position = self.win.nextPosition(5), parent = self.win, style = labelstyle1, text = 'Salt')        self.oil_label = Label(position = self.win.nextPosition(5), parent = self.win, style = labelstyle1, text = 'Oils')                # Creating labels for market values of Resources         self.label_mwater = Label(position = resize_pos((700.0,140.0),(800.0,600.0),self.win.size), parent = self.win, text = str(int(Water.get_mquantity())), style = labelstyle1)        self.label_mbuildmat = Label(position = self.win.nextPosition(7), parent = self.win, text = str(int(Buildmat.get_mquantity())), style = labelstyle1)        self.label_mtools = Label(position = self.win.nextPosition(7), parent = self.win, text = str(int(Tools.get_mquantity())), style = labelstyle1)        self.label_mbooks = Label(position = self.win.nextPosition(7), parent = self.win, text = str(int(Book.get_mquantity())), style = labelstyle1)        self.label_mmedicine = Label(position = self.win.nextPosition(7), parent = self.win, text = str(int(Medicine.get_mquantity())), style = labelstyle1)        self.label_mrice = Label(position = self.win.nextPosition(7), parent = self.win, text = str(int(Rice.get_mquantity())), style = labelstyle1)        self.label_mwheat = Label(position = self.win.nextPosition(7), parent = self.win, text = str(int(Wheat.get_mquantity())), style = labelstyle1)        self.label_mbeans = Label(position = self.win.nextPosition(7), parent = self.win, text = str(int(Beans.get_mquantity())), style = labelstyle1)        self.label_msugar = Label(position = self.win.nextPosition(7), parent = self.win, text = str(int(Sugar.get_mquantity())), style = labelstyle1)        self.label_msalt = Label(position = self.win.nextPosition(7), parent = self.win, text = str(int(Salt.get_mquantity())), style = labelstyle1)        self.label_moil = Label(position = self.win.nextPosition(7), parent = self.win, text = str(int(Oil.get_mquantity())), style = labelstyle1)                # Creating a textbox to enter the quantity to buy or sell        textbox_style = gui.defaultTextBoxStyle.copy()        textbox_style['font'] = myfont2        textbox_style['font-color'] = self.rect_color        self.label_quantity = Label(position = resize_pos((360.0,150.0),(800.0,600.0),self.win.size), parent = self.win, text = ' Quantity ', style = labelstyle1)        self.win.textbox = TextBox(position = resize_pos((350.0, 200.0),(800.0,600.0),self.win.size), parent = self.win, style = textbox_style)                     # Creating buttons for buying and selling and closing the window        button_style = gui.defaultButtonStyle.copy()        button_style['font'] = myfont2        self.button_buy = Button(position = resize_pos((370.0,280.0),(800.0,600.0),size_win), size = resize_pos((70.0,50.0),(800.0,600.0),size_win), parent = self.win, text = " Buy ",style = button_style)        self.button_sell = Button(position = resize_pos((370.0,330.0),(800.0,600.0),size_win), size = resize_pos((70.0,50.0),(800.0,600.0),size_win), parent = self.win, text = " Sell ",style = button_style)        self.button_close = Button(position = resize_pos((650.0,500.0),(800.0,600.0),size_win), size = resize_pos((120.0,50.0),(800.0,600.0),size_win), parent = self.win, text = "Close",style = button_style)        self.button_buy.onClick = self.buy_resources        self.button_sell.onClick = self.sell_resources        self.button_close.onClick  = self.close_win                        # Creating label to display the status messages        #  Creating Custom label style        labelStyleCopy = gui.defaultLabelStyle.copy()        labelStyleCopy['border-width'] = 1        labelStyleCopy['wordwrap'] = True        labelStyleCopy['autosize'] = False        labelStyleCopy['font'] = myfont2        labelStyleCopy['font-color'] = self.rect_color        labelStyleCopy['border-color'] = self.rect_color        text = 'Please select a Resouce, Enter the quantity you want to Buy or Sell and then press Buy or Sell button for Trading.'        self.message_label = Label(position = resize_pos((80,450),(800.0,600.0),self.win.size),size = resize_pos((500,100),(800.0,600.0),self.win.size), parent = self.win, text = text, style = labelStyleCopy)            def buy_resources(self,button):        ''' Initiated for doing the transaction of buying the resources         '''        # Checking whether the user has entered the value in text box properly        text = self.win.textbox.text        try:            quantity = int(float(text))            if quantity == 0:                self.message_label.text = 'Please Enter the quantity for buying or selling'                return                        except:            self.message_label.text = 'Please Enter a number as the quantity for buying or selling'            return                        # Checking whether the user has selected the appropriate option box for the resource or not, and do the appropriate action        if self.water_box.value:            label_text =  buy_res(Water,quantity)            if label_text == 'The Village has bought the resource you demanded':                self.label_vwater.text = str(int(Water.get_vquantity()))                self.label_mwater.text = str(int(Water.get_mquantity()))        elif self.buildmat_box.value:            label_text =  buy_res(Buildmat,quantity)            if label_text == 'The Village has bought the resource you demanded':                self.label_vbuildmat.text = str(int(Buildmat.get_vquantity()))                self.label_mbuildmat.text = str(int(Buildmat.get_mquantity()))        elif self.tools_box.value:            label_text =  buy_res(Tools,quantity)            if label_text == 'The Village has bought the resource you demanded':                self.label_vtools.text = str(int(Tools.get_vquantity()))                self.label_mtools.text = str(int(Tools.get_mquantity()))        elif self.medicine_box.value:            label_text =  buy_res(Medicine,quantity)            if label_text == 'The Village has bought the resource you demanded':                self.label_vmedicine.text = str(int(Medicine.get_vquantity()))                self.label_mmedicine.text = str(int(Medicine.get_mquantity()))        elif self.books_box.value:            label_text =  buy_res(Book,quantity)            if label_text == 'The Village has bought the resource you demanded':                self.label_vbooks.text = str(int(Book.get_vquantity()))                self.label_mbooks.text = str(int(Book.get_mquantity()))        elif self.rice_box.value:            label_text =  buy_res(Rice,quantity)            if label_text == 'The Village has bought the resource you demanded':                self.label_vrice.text = str(int(Rice.get_vquantity()))                self.label_mrice.text = str(int(Rice.get_mquantity()))        elif self.wheat_box.value:            label_text =  buy_res(Wheat,quantity)            if label_text == 'The Village has bought the resource you demanded':                self.label_vwheat.text = str(int(Wheat.get_vquantity()))                self.label_mwheat.text = str(int(Wheat.get_mquantity()))        elif self.beans_box.value:            label_text =  buy_res(Beans,quantity)            if label_text == 'The Village has bought the resource you demanded':                self.label_vbeans.text = str(int(Beans.get_vquantity()))                self.label_mbeans.text = str(int(Beans.get_mquantity()))        elif self.sugar_box.value:            label_text =  buy_res(Sugar,quantity)            if label_text == 'The Village has bought the resource you demanded':                self.label_vsugar.text = str(int(Sugar.get_vquantity()))                self.label_msugar.text = str(int(Sugar.get_mquantity()))        elif self.salt_box.value:            label_text =  buy_res(Salt,quantity)            if label_text == 'The Village has bought the resource you demanded':                self.label_vsalt.text = str(int(Salt.get_vquantity()))                self.label_msalt.text = str(int(Salt.get_mquantity()))        elif self.oil_box.value:            label_text =  buy_res(Oil,quantity)            if label_text == 'The Village has bought the resource you demanded':                self.label_voil.text = str(int(Oil.get_vquantity()))                self.label_moil.text = str(int(Oil.get_mquantity()))        else:            label_text = ' Please select a Resource for Trading'                self.message_label.text = label_text        self.win.textbox.text = ''                            def sell_resources(self,button):        ''' Initiated for doing the transaction of buying the resources         '''        # Checking whether the user has entered the value in text box properly        text = self.win.textbox.text        try:            quantity = int(float(text))            if quantity == 0:                self.message_label.text = 'Please Enter the quantity for buying or selling'                return                        except:            self.message_label.text = 'Please Enter a number as the quantity for buying or selling'            return                        # Checking whether the user has selected the appropriate option box for the resource or not, and do the appropriate action        if self.water_box.value:            label_text =  sell_res(Water,quantity)            if label_text == 'The Village has sold the resource you demanded':                self.label_vwater.text = str(int(Water.get_vquantity()))                self.label_mwater.text = str(int(Water.get_mquantity()))        elif self.buildmat_box.value:            label_text =  sell_res(Buildmat,quantity)            if label_text == 'The Village has sold the resource you demanded':                self.label_vbuildmat.text = str(int(Buildmat.get_vquantity()))                self.label_mbuildmat.text = str(int(Buildmat.get_mquantity()))        elif self.tools_box.value:            label_text =  sell_res(Tools,quantity)            if label_text == 'The Village has sold the resource you demanded':                self.label_vtools.text = str(int(Tools.get_vquantity()))                self.label_mtools.text = str(int(Tools.get_mquantity()))        elif self.medicine_box.value:            label_text =  sell_res(Medicine,quantity)            if label_text == 'The Village has sold the resource you demanded':                self.label_vmedicine.text = str(int(Medicine.get_vquantity()))                self.label_mmedicine.text = str(int(Medicine.get_mquantity()))        elif self.books_box.value:            label_text =  sell_res(Book,quantity)            if label_text == 'The Village has sold the resource you demanded':                self.label_vbooks.text = str(int(Book.get_vquantity()))                self.label_mbooks.text = str(int(Book.get_mquantity()))        elif self.rice_box.value:            label_text =  sell_res(Rice,quantity)            if label_text == 'The Village has sold the resource you demanded':                self.label_vrice.text = str(int(Rice.get_vquantity()))                self.label_mrice.text = str(int(Rice.get_mquantity()))        elif self.wheat_box.value:            label_text =  sell_res(Wheat,quantity)            if label_text == 'The Village has sold the resource you demanded':                self.label_vwheat.text = str(int(Wheat.get_vquantity()))                self.label_mwheat.text = str(int(Wheat.get_mquantity()))        elif self.beans_box.value:            label_text =  sell_res(Beans,quantity)            if label_text == 'The Village has sold the resource you demanded':                self.label_vbeans.text = str(int(Beans.get_vquantity()))                self.label_mbeans.text = str(int(Beans.get_mquantity()))        elif self.sugar_box.value:            label_text =  sell_res(Sugar,quantity)            if label_text == 'The Village has sold the resource you demanded':                self.label_vsugar.text = str(int(Sugar.get_vquantity()))                self.label_msugar.text = str(int(Sugar.get_mquantity()))        elif self.salt_box.value:            label_text =  sell_res(Salt,quantity)            if label_text == 'The Village has sold the resource you demanded':                self.label_vsalt.text = str(int(Salt.get_vquantity()))                self.label_msalt.text = str(int(Salt.get_mquantity()))        elif self.oil_box.value:            label_text =  sell_res(Oil,quantity)            if label_text == 'The Village has sold the resource you demanded':                self.label_voil.text = str(int(Oil.get_vquantity()))                self.label_moil.text = str(int(Oil.get_mquantity()))        else:            label_text = ' Please select a Resource for Trading'                self.message_label.text = label_text        self.win.textbox.text = ''    class focus_view:    ''' Class to focus at any position'''    def focus_at_pos(self,x,y):        animation_obj.focus_at(x,y)def main():        pygame.init()    screen = pygame.display.set_mode((1200,900),0,32)    update_thread = threading.Thread(target = threades.update_turn, args=[]).start()    clock = pygame.time.Clock()    # For initialising the style of the gui    defaultStyle.init(gui)    animation_obj = Animation()    mkt = Build('market.png',-1,5000,2000)   # Replace the coordinates with the     mkt.add(market,all)    # Initialisation of GUI elements with the desktop    desktop = Desktop()        # Displaying the WFP logo    wfp_logo = pygame.image.load(os.path.join('data', 'top.png')).convert()    srf3 = pygame.surface.Surface((1200,40))    srf3.blit(wfp_logo,(0,0))    font_money = pygame.font.SysFont("arial",25)            screen.fill((255,255,255))        srf = pygame.surface.Surface((1200,300))        srf.fill((0,0,0))    panel = display_panel(srf)    while True:        clock.tick()        pygame.display.set_caption(str(int(clock.get_fps())))                for e in gui.setEvents(pygame.event.get()):            if e.type == pygame.QUIT:                exit()                        if e.type == KEYDOWN:                if e.unicode == u'\x1b':  # For escape key                    exit()                if e.key == K_UP:                    animation_obj.move_up()                if e.key == K_DOWN:                    animation_obj.move_down()                if e.key == K_LEFT:                    animation_obj.move_left()                if e.key == K_RIGHT:                    animation_obj.move_right()                if e.key == K_f:                    animation_obj.focus()                if e.key == K_d:                    animation_obj.defocus()                text_surface = font_money.render('Money -:   '+str(int(money.get_money()))+'      ',True,(160,160,160),(0,0,0))        srf3.blit(text_surface,(850,10))        screen.blit(srf3,(0,0))        panel.update(srf)            screen.blit(srf,(0,600))        screen.blit(surface3,(0,40))        desktop.update()            desktop.draw()                pygame.display.flip()                if __name__ == '__main__':main()        