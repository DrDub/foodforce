#! /usr/bin/env python##   Author : Mohit Taneja (mohitgenii@gmail.com)#   Date : 9/06/2008 ##   This program is free software; you can redistribute it and/or modify#   it under the terms of the GNU General Public License as published by#   the Free Software Foundation; either version 2 of the License, or#   (at your option) any later version.##   This program is distributed in the hope that it will be useful,#   but WITHOUT ANY WARRANTY; without even the implied warranty of#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the#   GNU General Public License for more details.##   You should have received a copy of the GNU General Public License#   along with this program; if not, write to the Free Software#   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.#import pygamefrom pygame.locals import *from sys import exitimport osfrom time import *from threades import *import threadesimport threadingimport guifrom gui import *import defaultStylefrom load_images import *# Initializing pygame modulesclass bar:    color_bar = (47,47,255)    def __init__(self, surface, (x_value, y_value)):        ''' Draws a bar on the surface at posn x,y        '''        self.x = x_value        self.y = y_value        pygame.draw.rect(surface,self.color_bar,resize_rect((self.x,self.y,250,18)),2)        pygame.draw.rect(surface,(255,255,255),resize_rect((self.x+2,self.y+2,246,14)))    def update_value(self,surface,value):        '''Updates the value of the bar        '''        max_value = 100.0        max_pixel = 246.0        red = (255,57,57)        green = (90,255,90)        colour = (177,135,73)                   pygame.draw.rect(surface,self.color_bar,resize_rect((self.x,self.y,250,18)),2)                pygame.draw.rect(surface,colour,resize_rect((self.x+2,self.y+2,value/max_value*max_pixel,14)))        pygame.draw.rect(surface,(255,255,255),resize_rect((self.x+2+value/max_value*max_pixel,self.y+2,max_pixel-value/max_value*max_pixel,14)))class indicator_panel:    font_bg_color = (0,0,0)       # This should be same as  the background colour for the label    font_color = (255,214,150)    # This should be same as that for the font to be written on the label    color_grey = (160,160,160)    def __init__(self,surface):        ''' Draws the indicator panel on the surface        '''        myfont1 = pygame.font.Font("font.ttf", resize_pt(30))   # For main heading        myfont2 = pygame.font.Font("font.ttf", resize_pt(20))   # For indicators name        myfont3 = pygame.font.Font("font.ttf", resize_pt(16))        # Creating a custom label style        self.labelstyle1 = gui.defaultLabelStyle.copy()        self.labelstyle1['border-width'] = 1        self.labelstyle1['wordwrap'] = True        self.labelstyle1['autosize'] = False        self.labelstyle1['font'] = myfont1        self.labelstyle1['font-color'] = self.font_color        self.labelstyle1['border-color'] = self.color_grey        # Drawing main Indicator label        label = Label(position = resize_pos((900,600)),size = resize_pos((300,45)), parent = desktop, text = "      Indicators", style = self.labelstyle1)                # Creating second custom label        self.labelstyle2 = gui.defaultLabelStyle.copy()        self.labelstyle2['border-width'] = 0        self.labelstyle2['wordwrap'] = True        self.labelstyle2['autosize'] = False        self.labelstyle2['font'] = myfont2        self.labelstyle2['font-color'] = self.font_color        self.labelstyle2['border-color'] = self.color_grey        # Drawing all the indicators        ind_namelist = (' Housing',' Nutrition',' Health',' Education',' Training')        # Creating second custom label        self.labelstyle3 = gui.defaultLabelStyle.copy()        self.labelstyle3['border-width'] = 0        self.labelstyle3['wordwrap'] = False        self.labelstyle3['autosize'] = True        self.labelstyle3['font'] = myfont3        self.labelstyle3['font-color'] = self.font_color        self.labelstyle3['border-color'] = self.color_grey                # Empty Dictionary for bar        self.bar_dict = []        name_label_size = resize_pos((300,25))        self.value_labels = []        for i in range(5):            label = Label(position = resize_pos((900,650+50*i)),size = name_label_size, parent = desktop, text = ind_namelist[i], style = self.labelstyle2)            self.bar_dict.append(bar(surface,(902,677+50*i)))            label = Label(position = resize_pos((1160,677+50*i)), parent = desktop, text = str(0), style = self.labelstyle3)            self.value_labels.append(label)        def update_value(self):        ''' Updates the values of all the indicators        '''        pygame.draw.line(screen,self.color_grey,resize_pos((900,645)),resize_pos((900,900)),1)        for i in range(5):            self.bar_dict[i].update_value(screen,indicators_list[i].get_value())            if not (self.value_labels[i].text == str(int(indicators_list[i].get_value()))+'%'):                self.value_labels[i].text = str(int(indicators_list[i].get_value()))+'%'    # Function to display he message windowdef message_window():    ''' Thread to display the messages'''    font_color = (160,160,160)    myfont = pygame.font.Font("font.ttf", resize_pt(20))    # Custom Window Style    win_style = gui.defaultWindowStyle.copy()    win_style['font'] = myfont    win_style['font-color'] = font_color    win_style['bg-color'] = (0,0,25)    # Calculating position and size of window from the size of the desktop            position_win =resize_pos((745.0,42.0))    size_win =resize_pos((450.0,150.0))    # Creating custom label style for the text to be displayed as a message    labelStyleCopy = gui.defaultLabelStyle.copy()    labelStyleCopy['wordwrap'] = True    labelStyleCopy['autosize'] = False    labelStyleCopy['font'] = myfont    labelStyleCopy['font-color'] = font_color    while True:        (text,color) = message.pop_message()        if text:            # Creating window            win = Window(position = position_win, size = size_win, parent = desktop, text = "Message " ,style = win_style)            win.surf.set_alpha(160)             # Creating label            message_label = Label(position = resize_pos((5,50),(450.0,150.0),win.size),size = resize_pos((445,140),(450.0,150.0),win.size), parent = win, text = text, style = labelStyleCopy)            sleep(6)            win.close()        sleep(1)class resources_panel:    font_bg_color = (0,0,0)             # This should be same as  the background colour for the label    font_color = (255,214,150)      # This should be same as that for the font to be written on the label    color_grey = (160,160,160)    def __init__(self,surface):        ''' Draws the resources panel on the surface        '''                myfont1 = pygame.font.Font("font.ttf", resize_pt(30))   # For main heading        myfont2 = pygame.font.Font("font.ttf", resize_pt(20))   # For resources name and their value        myfont3 = pygame.font.Font("font.ttf", resize_pt(16))        myfont4 = pygame.font.Font("font.ttf", resize_pt(18))   # For the display of money                # Creating a custom label style        self.labelstyle1 = gui.defaultLabelStyle.copy()        self.labelstyle1['border-width'] = 1        self.labelstyle1['wordwrap'] = True        self.labelstyle1['autosize'] = False        self.labelstyle1['font'] = myfont1        self.labelstyle1['font-color'] = self.font_color        self.labelstyle1['border-color'] = self.color_grey                # Drawing main Resources rectangle        label = Label(position = resize_pos((400,600)),size = resize_pos((500,45)), parent = desktop, text = "                    Resources", style = self.labelstyle1)        # Creating second label style        self.labelstyle2 = gui.defaultLabelStyle.copy()        self.labelstyle2['border-width'] = 0        self.labelstyle2['wordwrap'] = True        self.labelstyle2['autosize'] = False        self.labelstyle2['font'] = myfont2        self.labelstyle2['font-color'] = self.font_color                self.labelstyle3 = gui.defaultLabelStyle.copy()        self.labelstyle3['border-width'] = 0        self.labelstyle3['wordwrap'] = False        self.labelstyle3['autosize'] = True        self.labelstyle3['font'] = myfont3        self.labelstyle3['font-color'] = self.font_color                self.labelstyle4 = gui.defaultLabelStyle.copy()        self.labelstyle4['border-width'] = 0        self.labelstyle4['wordwrap'] = False        self.labelstyle4['autosize'] = True        self.labelstyle4['font'] = myfont4        self.labelstyle4['font-color'] = (160,160,160)        self.money_label = Label(position = resize_pos((850,10)), parent = desktop, text = 'Money -:   '+str(int(money.get_money()))+'      ', style = self.labelstyle4)                self.value_labels = []        # Drawing general resources list        list_gen_res = (' Water',' Building Materials',' Tools',' Medicines',' Books')        for i in range(5):            label = Label(position = resize_pos((400,645+35*i)),size = resize_pos((200,35)), parent = desktop, text = list_gen_res[i], style = self.labelstyle2)            label = Label(position = resize_pos((605,649+35*i)), parent = desktop, text = str(int(resources[i].get_vquantity())), style = self.labelstyle3)            self.value_labels.append(label)                    # Drawing food resources list        list_food_res = (' Rice',' Fruit & Vegatables',' Beans',' Sugar',' Salt',' Oil')        for i in range(6):            label = Label(position = resize_pos((650,645+35*i)),size = resize_pos((200,35)), parent = desktop, text = list_food_res[i], style = self.labelstyle2)            label = Label(position = resize_pos((855,649+35*i)), parent = desktop, text = str(int(resources[i+5].get_vquantity())), style = self.labelstyle3)            self.value_labels.append(label)        def update_value(self):        ''' Updates the resources panel        '''        # Updating general resources list        pygame.draw.line(screen,self.color_grey,resize_pos((400,645)),resize_pos((400,855)),1)        pygame.draw.line(screen,self.color_grey,resize_pos((650,645)),resize_pos((650,855)),1)        for i in range(11):            if not (self.value_labels[i].text == str(int(resources[i].get_vquantity()))):                self.value_labels[i].text = str(int(resources[i].get_vquantity()))            self.money_label.text = 'Money -:   '+str(int(money.get_money()))+'      '        class manpower_panel:    font_bg_color = (0,0,0)       # This should be same as  the background colour for the label    font_color = (255,214,150)    # This should be same as that for the font to be written on the label    color_grey = (160,160,160)    def __init__(self,surface):        ''' Draws the manpower panel        '''        myfont1 = pygame.font.Font("font.ttf", resize_pt(30))   # For main heading        myfont2 = pygame.font.Font("font.ttf", resize_pt(20))   # For resources name and their value        myfont3 = pygame.font.Font("font.ttf", resize_pt(16))   # For resources name and their value        # Creating a custom label style        self.labelstyle1 = gui.defaultLabelStyle.copy()        self.labelstyle1['border-width'] = 1        self.labelstyle1['wordwrap'] = True        self.labelstyle1['autosize'] = False        self.labelstyle1['font'] = myfont1        self.labelstyle1['font-color'] = self.font_color        self.labelstyle1['border-color'] = self.color_grey        # Drawing main Manpower Resources rectangle        label = Label(position = resize_pos((0,600)),size = resize_pos((400,45)), parent = desktop, text = "  Manpower Distribution", style = self.labelstyle1)        # Creating second label style        self.labelstyle2 = gui.defaultLabelStyle.copy()        self.labelstyle2['border-width'] = 0        self.labelstyle2['wordwrap'] = True        self.labelstyle2['autosize'] = False        self.labelstyle2['font'] = myfont2        self.labelstyle2['font-color'] = self.font_color        self.labelstyle2['border-color'] = self.color_grey        self.labelstyle3 = gui.defaultLabelStyle.copy()        self.labelstyle3['border-width'] = 0        self.labelstyle3['wordwrap'] = False        self.labelstyle3['autosize'] = True        self.labelstyle3['font'] = myfont3        self.labelstyle3['font-color'] = self.font_color        self.labelstyle3['border-color'] = self.color_grey        # Drawing Manpower resources list        list_names = (' Total Population',' Sheltered People',' Educated People',' Healthy People',' People Fed',' People Employed')        list_values = (ppl.get_total_population(),ppl.get_no_of_ppl_sheltered(),ppl.get_no_of_ppl_educated(),ppl.get_no_of_ppl_healthy(),ppl.get_no_of_ppl_fed(),ppl.get_total_no_of_ppl_emp())                self.value_labels = []        for i in range(6):            label = Label(position = resize_pos((0,645+35*i)),size = resize_pos((350,35)), parent = desktop, text = list_names[i], style = self.labelstyle2)            label = Label(position = resize_pos((355,649+35*i)), parent = desktop, text = str(int(list_values[i])), style = self.labelstyle3)            self.value_labels.append(label)    def update_value(self):        ''' Updates the Manpower panel        '''        list_values = (ppl.get_total_population(),ppl.get_no_of_ppl_sheltered(),ppl.get_no_of_ppl_educated(),ppl.get_no_of_ppl_healthy(),ppl.get_no_of_ppl_fed(),ppl.get_total_no_of_ppl_emp())        pygame.draw.line(screen,self.color_grey,resize_pos((900,645)),resize_pos((900,855)),1)        pygame.draw.rect(screen,self.color_grey,resize_rect((0,855,300,45)),2)                pygame.draw.rect(screen,self.color_grey,resize_rect((300,855,300,45)),2)                pygame.draw.rect(screen,self.color_grey,resize_rect((600,855,300,45)),2)                for i in range(6):            if not (self.value_labels[i].text == str(int(list_values[i]))):                self.value_labels[i].text = str(int(list_values[i]))        class facilities_panel:    font_bg_color = (255,255,255)       # This should be same as  the background colour for the label    font_color = (255,214,150)    # This should be same as that for the font to be written on the label    color_grey = (160,160,160)    def __init__(self,surface):        ''' Draws the Facilities panel        '''        myfont1 = pygame.font.Font("font.ttf", resize_pt(20))   # For resources name and their value                self.labelstyle1 = gui.defaultLabelStyle.copy()        self.labelstyle1['border-width'] = 0        self.labelstyle1['wordwrap'] = False        self.labelstyle1['autosize'] = False        self.labelstyle1['font'] = myfont1        self.labelstyle1['font-color'] = self.font_color        #self.labelstyle1['bg-color'] = self.font_bg_color                self.list_titles = ('Houses ','Schools ','Hospitals ','Workshops ','Farms ','Wells ')        self.list_names = ('Number: ','Number: ','Number: ','Number: ','Number: ','Number: ')        self.list_values1 = (House.get_number(),School.get_number(),Hospital.get_number(),Workshop.get_number(),Farm.get_number(),Fountain.get_number())        self.list_values2 = (House.get_level(),School.get_level(),Hospital.get_level(),Workshop.get_level(),Farm.get_level(),Fountain.get_level())        self.value_labels = []        for i in range(6):            label = Label(position = resize_pos((950,50+55*i)),size = resize_pos((300,30)), parent = desktop, text = self.list_titles[i], style = self.labelstyle1)            label = Label(position = resize_pos((950,75+55*i)),size = resize_pos((300,30)), parent = desktop, text = self.list_names[i]+str(int(self.list_values1[i]))+' Level: '+str(int(self.list_values2[i])), style = self.labelstyle1)            label.surf.set_alpha(200)            self.value_labels.append(label)    def update_value(self):        ''' Updates the Facilities panel        '''        self.list_values1 = (House.get_original_number(),School.get_original_number(),Hospital.get_original_number(),Workshop.get_original_number(),Farm.get_original_number(),Fountain.get_original_number())        self.list_values2 = (House.get_level(),School.get_level(),Hospital.get_level(),Workshop.get_level(),Farm.get_level(),Fountain.get_level())        pygame.draw.rect(screen,(0,0,0),resize_rect((930,40,270,350)))         for i in range(6):            if not (self.value_labels[i].text == self.list_names[i]+str(int(self.list_values1[i]))+' Level: '+str(int(self.list_values2[i]))):                self.value_labels[i].text = self.list_names[i]+str(int(self.list_values1[i]))+' Level: '+str(int(self.list_values2[i]))class mini_map:    def __init__(self):        for i in range(6):            Map_images[i] = pygame.transform.scale(Map_images[i],resize_pos((15,15)))        self.map = pygame.image.load(os.path.join('data', 'map.png')).convert()        self.map = pygame.transform.scale(self.map,resize_pos((270,210)))        def update(self):                screen.blit(self.map,resize_pos((930,390)))        for i in range(len(facilities_list)):            for j in range(facilities_list[i].get_original_number()):                posn = resize_pos((930+int(facilities_posn_list[i][j][0]/33.3),390+int(facilities_posn_list[i][j][1]/28.57)))                screen.blit(Map_images[i],posn)        class display_panel:    def __init__(self,surface):        self.ind = indicator_panel(screen)        self.res = resources_panel(screen)        self.man = manpower_panel(screen)        self.fac = facilities_panel(screen)        self.map = mini_map()    def update(self,surface):        self.ind.update_value()        self.res.update_value()        self.map.update()        self.man.update_value()        self.fac.update_value()class gui_buttons:    rect_color = (255,214,150)    color_grey = (160,160,160)    def __init__(self):        ''' Initialises the buttons for setting up facility, upgrading it and for buy/sell operations        '''        myfont = pygame.font.Font("font.ttf", resize_pt(17))        button_style = gui.defaultButtonStyle.copy()        button_style['font'] = myfont        self.setup_button = Button(position = resize_pos((50,865)), size = resize_pos((200,25)), parent = desktop, text = "Setup Facility",style = button_style)        self.upgrade_button = Button(position = resize_pos((350,865)), size = resize_pos((200,25)), parent = desktop, text = "Upgrade Facility",style = button_style)        self.buysell_button = Button(position = resize_pos((650,865)), size = resize_pos((200,25)), parent = desktop, text = "Buy/Sell Resources",style = button_style)        self.setup_button.onClick = self.setup        self.upgrade_button.onClick = self.upgrade        self.buysell_button.onClick = self.buysell        self.win_flag = False        self.child_win_flag = False    def get_win_flag(self):        return self.win_flag    def get_child_win_flag(self):        return self.child_win_flag    def close_child_win(self):        self.child_win.close()        self.enable_parent_win()    def disable_buttons(self):        # stopping the motion of the background        transform_obj.stop_mouse_move()        self.setup_button.enabled = False        self.upgrade_button.enabled = False        self.buysell_button.enabled = False    def enable_buttons(self):        resume_update_thread()        # resume mouse motion        transform_obj.resume_mouse_move()        self.win_flag = False        self.setup_button.enabled = True        self.upgrade_button.enabled = True        self.buysell_button.enabled = True    # Functions for setting up a facility begin    def setup(self,button=None):        ''' Initiated when the button for setting up a facility is clicked        '''        self.disable_buttons()        myfont = pygame.font.Font("font.ttf", resize_pt(20))        # Custom Window Style        win_style = gui.defaultWindowStyle.copy()        win_style['font'] = myfont        win_style['font-color'] = self.rect_color        win_style['bg-color'] = (0,0,0)        # Calculating position and size of window from the size of the desktop                position_win =resize_pos((200.0,50.0))        size_win =resize_pos((800.0,600.0))        # Creating window        self.win = Window(position = position_win, size = size_win, parent = desktop, text = "Set up a facility for your village " ,style = win_style,shadeable = False)        #self.win.surf.blit(School_tiles_list[3][2],(0,0))        self.win.surf.set_alpha(140)         self.win.onClose = lambda button: self.enable_buttons()        self.win_flag = True        #print type(self.win.surf)        #  Creating Custom label style        myfont2 = pygame.font.Font("font.ttf", resize_pt(16))        myfont3 = pygame.font.Font("font.ttf", resize_pt(14))        labelStyleCopy = gui.defaultLabelStyle.copy()        labelStyleCopy['border-width'] = 1        labelStyleCopy['wordwrap'] = True        labelStyleCopy['autosize'] = False        labelStyleCopy['font'] = myfont2        labelStyleCopy['font-color'] = self.rect_color        labelStyleCopy['border-color'] = self.color_grey        default_text = 'What would you like to set up? Choose a facility from the list and press the Set Up button.'        self.message_label = Label(position = resize_pos((450,120),(800.0,600.0),self.win.size),size = resize_pos((250,100),(800.0,600.0),self.win.size), parent = self.win, text = default_text, style = labelStyleCopy)        text ='Please select a Facility to see its status and Requirements'         labelStyleCopy2 = gui.defaultLabelStyle.copy()        labelStyleCopy2['border-width'] = 1        labelStyleCopy2['wordwrap'] = True        labelStyleCopy2['autosize'] = False        labelStyleCopy2['font'] = myfont3        labelStyleCopy2['font-color'] = self.rect_color        labelStyleCopy2['border-color'] = self.color_grey        self.message_label2 = Label(position = resize_pos((20,400),(800.0,600.0),self.win.size),size = resize_pos((570,120),(800.0,600.0),self.win.size), parent = self.win, text = text, style = labelStyleCopy2)        # creating custom style for option box        op_style = gui.defaultOptionBoxStyle.copy()        op_style['font'] = myfont        op_style['font-color'] = self.rect_color        op_style['autosize'] = True        op_style['word wrap'] = False        # Creating option boxes for all the facilities        position_optionbox = resize_pos((200.0,150.0),(800.0,600.0),size_win)                self.housing_box = OptionBox(position = position_optionbox, parent = self.win, style = op_style, text = 'House')        self.housing_box.onClick =  self.on_select_setup_option_box        self.hospital_box = OptionBox(position = self.win.nextPosition(resize_pt_y(10)), parent = self.win, style = op_style, text = 'Hospital')        self.hospital_box.onClick = self.on_select_setup_option_box        self.workshop_box = OptionBox(position = self.win.nextPosition(resize_pt_y(10)), parent = self.win, style = op_style, text = 'Workshop')        self.workshop_box.onClick = self.on_select_setup_option_box        self.school_box = OptionBox(position = self.win.nextPosition(resize_pt_y(10)), parent = self.win, style = op_style, text = 'School')        self.school_box.onClick = self.on_select_setup_option_box        self.farm_box = OptionBox(position = self.win.nextPosition(resize_pt_y(10)), parent = self.win, style = op_style, text = 'Farm')        self.farm_box.onClick = self.on_select_setup_option_box        self.fountain_box = OptionBox(position = self.win.nextPosition(resize_pt_y(10)), parent = self.win, style = op_style, text = 'Well')        self.fountain_box.onClick = self.on_select_setup_option_box        self.win.surf.set_alpha(255)        background = self.win.surf.subsurface(pygame.Rect(resize_rect((400,180,200,200))))        self.background_pic = background.copy()        self.win.surf.set_alpha(140)        # Creating buttons for Setting up the facility and closing the setup window        button_style = gui.defaultButtonStyle.copy()        button_style['font'] = myfont2        self.button_setup = Button(position = resize_pos((600.0,420.0),(800.0,600.0),size_win), size = resize_pos((120.0,50.0),(800.0,600.0),size_win), parent = self.win, text = "Set Up",style = button_style)        #self.button_close = Button(position = resize_pos((600.0,460.0),(800.0,600.0),size_win), size = resize_pos((120.0,50.0),(800.0,600.0),size_win), parent = self.win, text = "Close",style = button_style)        #self.button_close.onClick  = self.close_win        self.button_setup.onClick = self.setup_facility    def on_select_setup_option_box(self,button):        self.win.surf.set_alpha(255)        self.win.surf.blit(self.background_pic,resize_pos((450,250)))        self.win.surf.set_alpha(140)        if button.text == 'House':            text = 'House: '            image = House_tiles_list[2][2]            text += get_setup_text(House)        if button.text == 'Hospital':            text = 'Hospital: '            image = Hospital_tiles_list[2][2]            text += get_setup_text(Hospital)        if button.text == 'School':            text = 'School: '            image = School_tiles_list[2][2]            text += get_setup_text(School)        if button.text == 'Workshop':            text = 'Workshop: '            image = Workshop_tiles_list[2][2]            text += get_setup_text(Workshop)        if button.text == 'Farm':            text = 'Farm: '            image = Farm_tiles[0][1]            text += get_setup_text(Farm)        if button.text == 'Well':            text = 'Well: '            image = Fountain_tiles[0][3]            text += get_setup_text(Fountain)        display_image = pygame.transform.scale(image,resize_pos((140,140)))        self.win.surf.blit(display_image,resize_pos((450,250)))        self.message_label2.text = text    def close_win(self,button=None):        self.win.close()        self.win_flag = False        self.enable_buttons()    def setup_facility(self,button):        ''' Sets up the facility        '''        if self.housing_box.value:            label_text =  build_facility(House)        elif self.hospital_box.value:            label_text =  build_facility(Hospital)        elif self.workshop_box.value:            label_text =  build_facility(Workshop)        elif self.fountain_box.value:            label_text =  build_facility(Fountain)        elif self.school_box.value:            label_text =  build_facility(School)        elif self.farm_box.value:            label_text =  self.build_facility_farm()        else:            label_text = ' Please select a Facility for building'        self.message_label.text = label_text        if label_text== 'Facility has been build':            self.close_win()    def build_facility_farm(self):        myfont = pygame.font.Font("font.ttf",resize_pt(22))        # Custom Window Style        win_style = gui.defaultWindowStyle.copy()        win_style['font'] = myfont        win_style['font-color'] = self.rect_color        win_style['bg-color'] = (0,0,0)        # Calculating position and size of window from the size of the desktop                position_win =resize_pos((300.0,150.0))        size_win =resize_pos((600.0,400.0))        # Creating window        self.child_win = Window(position = position_win, size = size_win, parent = desktop, text = "Setup Farm " ,style = win_style,shadeable = False)        self.child_win.surf.set_alpha(190)         self.win.enabled = False        self.child_win_flag = True        self.child_win.onClose = lambda button: self.enable_parent_win()        # Creating custom label style1        myfont2 = pygame.font.Font("font.ttf",resize_pt(16))        labelstyle1 = gui.defaultLabelStyle.copy()        labelstyle1['border-width'] = 0        labelstyle1['wordwrap'] = False        labelstyle1['autosize'] = True        labelstyle1['font'] = myfont2        labelstyle1['font-color'] = self.rect_color        label_rice = Label(position = resize_pos((10.0,70.0),(600.0,400.0),self.child_win.size), parent = self.child_win, text = 'Rice', style = labelstyle1)        label_veg = Label(position = self.child_win.nextPosition(resize_pt_y(20)), parent = self.child_win, text = 'Fruit and Vegetables', style = labelstyle1)        label_beans = Label(position = self.child_win.nextPosition(resize_pt_y(20)), parent = self.child_win, text = 'Beans', style = labelstyle1)        # Creating second custom label style        labelStyleCopy2 = gui.defaultLabelStyle.copy()        labelStyleCopy2['border-width'] = 1        labelStyleCopy2['wordwrap'] = True        labelStyleCopy2['autosize'] = False        labelStyleCopy2['font'] = myfont2        labelStyleCopy2['font-color'] = self.rect_color        labelStyleCopy2['border-color'] = self.color_grey        text = ' Please enter the percentages of different food items you want to grow in your farm'        self.message_label2 = Label(position = resize_pos((20,200),(600.0,400.0),self.child_win.size),size = resize_pos((470,120),(600.0,400.0),self.child_win.size), parent = self.child_win, text = text, style = labelStyleCopy2)        # Creating custom text box style        textbox_style = gui.defaultTextBoxStyle.copy()        textbox_style['font'] = myfont2        textbox_style['font-color'] = self.rect_color        self.textbox_rice = TextBox(position = resize_pos((300.0, 70.0),(600.0,400.0),self.child_win.size), size = resize_pos((50,20),(600.0,400.0),self.child_win.size), parent = self.child_win, style = textbox_style)         self.textbox_veg = TextBox(position = resize_pos((300.0, 110.0),(600.0,400.0),self.child_win.size), size = resize_pos((50,20),(600.0,400.0),self.child_win.size), parent = self.child_win, style = textbox_style)         self.textbox_beans = TextBox(position = resize_pos((300.0, 150.0),(600.0,400.0),self.child_win.size), size = resize_pos((50,20),(600.0,400.0),self.child_win.size), parent = self.child_win, style = textbox_style)         # Custom button style                button_style = gui.defaultButtonStyle.copy()        button_style['font'] = myfont2        self.button_setup_farm = Button(position = resize_pos((500.0,300.0),(600.0,400.0),size_win), size = resize_pos((80.0,50.0),(600.0,400.0),size_win), parent = self.child_win, text = "Set Up",style = button_style)        self.button_setup_farm.onClick = self.setup_facility_farm        self.return_text_farm = ' '        return self.return_text_farm    def setup_facility_farm(self,button):        # Checking whether the user has entered the value in text box properly        text1 = self.textbox_rice.text        try:            if text1 == '':                quantity1 = 0            else:                quantity1 = float(text1)                if quantity1 < 0.0:                    self.message_label2.text = 'Please enter a positive value as the percentage of rice'                    return        except:            self.message_label2.text = 'Please enter a number as the percentage of rice you want to grow'            return            text2 = self.textbox_veg.text        try:            if text2 == '':                quantity2 = 0            else:                quantity2 = float(text2)                if quantity2 < 0.0:                    self.message_label2.text = 'Please enter a positive value as the percentage of vegetables'                    return        except:            self.message_label2.text = 'Please enter a number as the percentage of vegetables you want to grow'            return            text3 = self.textbox_beans.text        print text3        try:            if text3 == '':                quantity3 = 0            else:                quantity3 = float(text3)                if quantity3 < 0.0:                    self.message_label2.text = 'Please enter a positive value as the percentage of beans'                    return        except:            self.message_label2.text = 'Please enter a number as the percentage of beans you want to grow'            return            if ((quantity1 + quantity2 + quantity3)< 99.5) or ((quantity1 + quantity2 + quantity3)> 100.5):            self.message_label2.text = 'The sum of all the percentages should be equal to 100'            return        list_food = [quantity1,quantity2,quantity3]        label_text = build_facility(Farm,list_food)        self.message_label2.text = label_text        if label_text == 'Facility has been build':                self.child_win.close()            self.enable_parent_win()            self.close_win()            return    def enable_parent_win(self):        self.child_win_flag = False        self.win.enabled = True    # Functions for setting up a facility end here.....    # Functions for upgrading a facility    def upgrade(self,button=None):        ''' Initiated when the button for upgrading a facility is clicked        '''        self.disable_buttons()        myfont = pygame.font.Font("font.ttf", resize_pt(20))        # Custom Window Style        win_style = gui.defaultWindowStyle.copy()        win_style['font'] = myfont        win_style['font-color'] = self.rect_color        win_style['bg-color'] = (0,0,0)        # Calculating position and size of window from the size of the desktop                position_win =resize_pos((200.0,50.0))        size_win =resize_pos((800.0,600.0))        # Creating window        self.win = Window(position = position_win, size = size_win, parent = desktop, text = "Upgrade Facility " ,style = win_style,shadeable = False)        self.win.surf.set_alpha(140)         self.win.onClose = lambda button: self.enable_buttons()        self.win_flag = True        #  Creating Custom label style        myfont2 = pygame.font.Font("font.ttf", resize_pt(16))        labelStyleCopy = gui.defaultLabelStyle.copy()        labelStyleCopy['border-width'] = 1        labelStyleCopy['wordwrap'] = True        labelStyleCopy['autosize'] = False        labelStyleCopy['font'] = myfont2        labelStyleCopy['font-color'] = self.rect_color        labelStyleCopy['border-color'] = self.color_grey        text = 'Please select a Facility and press Upgrade button to upgrade.'        self.message_label = Label(position = resize_pos((450,150),(800.0,600.0),self.win.size),size = resize_pos((200,100),(800.0,600.0),self.win.size), parent = self.win, text = text, style = labelStyleCopy)        # creating custom style for option box        op_style = gui.defaultOptionBoxStyle.copy()        op_style['font'] = myfont        op_style['font-color'] = self.rect_color        op_style['autosize'] = True        op_style['word wrap'] = False        # Creating option boxes for all the facilities        position_optionbox = resize_pos((200.0,150.0),(800.0,600.0),size_win)                self.housing_box = OptionBox(position = position_optionbox, parent = self.win, style = op_style, text = 'House')        self.housing_box.onClick =  self.on_select_upgrade_option_box        self.hospital_box = OptionBox(position = self.win.nextPosition(resize_pt_y(10)), parent = self.win, style = op_style, text = 'Hospital')        self.hospital_box.onClick = self.on_select_upgrade_option_box        self.workshop_box = OptionBox(position = self.win.nextPosition(resize_pt_y(10)), parent = self.win, style = op_style, text = 'Workshop')        self.workshop_box.onClick = self.on_select_upgrade_option_box        self.school_box = OptionBox(position = self.win.nextPosition(resize_pt_y(10)), parent = self.win, style = op_style, text = 'School')        self.school_box.onClick = self.on_select_upgrade_option_box        self.farm_box = OptionBox(position = self.win.nextPosition(resize_pt_y(10)), parent = self.win, style = op_style, text = 'Farm')        self.farm_box.onClick = self.on_select_upgrade_option_box        self.fountain_box = OptionBox(position = self.win.nextPosition(resize_pt_y(10)), parent = self.win, style = op_style, text = 'Well')        self.fountain_box.onClick = self.on_select_upgrade_option_box        myfont3 = pygame.font.Font("font.ttf", resize_pt(14))        text ='Please select a Facility to see its next upgrade'         labelStyleCopy2 = gui.defaultLabelStyle.copy()        labelStyleCopy2['border-width'] = 1        labelStyleCopy2['wordwrap'] = True        labelStyleCopy2['autosize'] = False        labelStyleCopy2['font'] = myfont3        labelStyleCopy2['font-color'] = self.rect_color        labelStyleCopy2['border-color'] = self.color_grey        self.message_label2 = Label(position = resize_pos((20,400),(800.0,600.0),self.win.size),size = resize_pos((570,120),(800.0,600.0),self.win.size), parent = self.win, text = text, style = labelStyleCopy2)        # Creating buttons for Setting up the facility and closing the setup window        button_style = gui.defaultButtonStyle.copy()        button_style['font'] = myfont2                self.win.surf.set_alpha(255)        background = self.win.surf.subsurface(pygame.Rect(resize_rect((400,180,200,200))))        self.background_pic = background.copy()        self.win.surf.set_alpha(140)        self.button_upgrade = Button(position = resize_pos((600.0,420.0),(800.0,600.0),size_win), size = resize_pos((120.0,50.0),(800.0,600.0),size_win), parent = self.win, text = "Upgrade",style = button_style)        #self.button_close = Button(position = resize_pos((600.0,460.0),(800.0,600.0),size_win), size = resize_pos((120.0,50.0),(800.0,600.0),size_win), parent = self.win, text = "Close",style = button_style)        #self.button_close.onClick  = self.close_win        self.button_upgrade.onClick = self.upgrade_facility    def on_select_upgrade_option_box(self,button):                self.win.surf.set_alpha(255)        self.win.surf.blit(self.background_pic,resize_pos((450,250)))        self.win.surf.set_alpha(140)        text = ''        if button.text == 'House':            image = House_tiles_list[2][2]            text += get_upgrade_text(House)        if button.text == 'Hospital':            image = Hospital_tiles_list[2][2]            text += get_upgrade_text(Hospital)        if button.text == 'School':            image = School_tiles_list[2][2]            text += get_upgrade_text(School)        if button.text == 'Workshop':            image = Workshop_tiles_list[2][2]            text += get_upgrade_text(Workshop)        if button.text == 'Farm':            image = Farm_tiles[0][1]            text += get_upgrade_text(Farm)        if button.text == 'Well':            image = Fountain_tiles[0][3]            text += get_upgrade_text(Fountain)        display_image = pygame.transform.scale(image,resize_pos((140,140)))        self.win.surf.blit(display_image,resize_pos((450,250)))        self.message_label2.text = text        self.message_label.text = 'Upgrades ' + button.text    def upgrade_facility(self,button):        ''' Upgrades the facility        '''        if self.housing_box.value:            label_text =  upgrade_facility(House)        elif self.hospital_box.value:            label_text =  upgrade_facility(Hospital)        elif self.workshop_box.value:            label_text =  upgrade_facility(Workshop)        elif self.fountain_box.value:            label_text =  upgrade_facility(Fountain)        elif self.school_box.value:            label_text =  upgrade_facility(School)        elif self.farm_box.value:            label_text =  upgrade_facility(Farm)        else:            label_text = ' Please select a Facility for Upgrading'        self.message_label.text = label_text        if label_text== 'Facility has been upgraded':            self.close_win()    # Functions for upgrading a facility end here........    # Functions for Buy/Sell operation begin here    def buysell(self,button=None):        ''' Initiated when the button for buy/sell operation is pressed......        '''        self.disable_buttons()        myfont = pygame.font.Font("font.ttf", resize_pt(20))        # Custom Window Style        win_style = gui.defaultWindowStyle.copy()        win_style['font'] = myfont        win_style['font-color'] = self.rect_color        win_style['bg-color'] = (0,0,0)        # Focus the animation window on the market        transform_obj.focus_at((2800,2500)) # Replace this with the coordinates ofthe market in the base surface        # Calculating position and size of window from the size of the desktop                position_win =resize_pos((200.0,50.0))        size_win =resize_pos((800.0,600.0))        # Creating window        self.win = Window(position = position_win, size = size_win, parent = desktop, text = " Buy or Sell Resources " ,style = win_style,shadeable = False)        self.win.surf.set_alpha(140)         self.win.onClose = lambda button: self.enable_buttons()        self.win_flag = True        # Pausing the update thread        pause_update_thread()        # Creating custom label style1        myfont2 = pygame.font.Font("font.ttf",resize_pt(16))        labelstyle1 = gui.defaultLabelStyle.copy()        labelstyle1['border-width'] = 0        labelstyle1['wordwrap'] = False        labelstyle1['autosize'] = True        labelstyle1['font'] = myfont2        labelstyle1['font-color'] = self.rect_color        heading_label1 = Label(position = resize_pos((10.0,70.0),(800.0,600.0),self.win.size), parent = self.win, text = 'Resources', style = labelstyle1)        heading_label2 = Label(position = resize_pos((180.0,70.0),(800.0,600.0),self.win.size), parent = self.win, text = 'Village', style = labelstyle1)        heading_label3 = Label(position = resize_pos((180.0,85.0),(800.0,600.0),self.win.size), parent = self.win, text = 'Quantity', style = labelstyle1)        heading_label4 = Label(position = resize_pos((280.0,70.0),(800.0,600.0),self.win.size), parent = self.win, text = 'Price', style = labelstyle1)        heading_label5 = Label(position = resize_pos((520.0,70.0),(800.0,600.0),self.win.size), parent = self.win, text = 'Resources', style = labelstyle1)        heading_label6 = Label(position = resize_pos((700.0,70.0),(800.0,600.0),self.win.size), parent = self.win, text = 'Market', style = labelstyle1)        heading_label7 = Label(position = resize_pos((700.0,85.0),(800.0,600.0),self.win.size), parent = self.win, text = 'Quantity', style = labelstyle1)        # creating custom style for option box        op_style = gui.defaultOptionBoxStyle.copy()        op_style['font'] = myfont2        op_style['font-color'] = self.rect_color        op_style['autosize'] = True        op_style['word wrap'] = False        # Creating option boxes for all the resources        position_optionbox = resize_pos((10.0,140.0),(800.0,600.0),self.win.size)                self.water_box = OptionBox(position = position_optionbox, parent = self.win, style = op_style, text = 'Water')        self.buildmat_box = OptionBox(position = self.win.nextPosition(resize_pt_y(7)), parent = self.win, style = op_style, text = 'Building Materials')        self.tools_box = OptionBox(position = self.win.nextPosition(resize_pt_y(7)), parent = self.win, style = op_style, text = 'Tools')        self.books_box = OptionBox(position = self.win.nextPosition(resize_pt_y(7)), parent = self.win, style = op_style, text = 'Books')        self.medicine_box = OptionBox(position = self.win.nextPosition(resize_pt_y(7)), parent = self.win, style = op_style, text = 'Medicines')        self.rice_box = OptionBox(position = self.win.nextPosition(resize_pt_y(7)), parent = self.win, style = op_style, text = 'Rice')        self.wheat_box = OptionBox(position = self.win.nextPosition(resize_pt_y(7)), parent = self.win, style = op_style, text = 'Fruit & Vegatables')        self.beans_box = OptionBox(position = self.win.nextPosition(resize_pt_y(7)), parent = self.win, style = op_style, text = 'Beans')        self.sugar_box = OptionBox(position = self.win.nextPosition(resize_pt_y(7)), parent = self.win, style = op_style, text = 'Sugar')        self.salt_box = OptionBox(position = self.win.nextPosition(resize_pt_y(7)), parent = self.win, style = op_style, text = 'Salt')        self.oil_box = OptionBox(position = self.win.nextPosition(resize_pt_y(7)), parent = self.win, style = op_style, text = 'Oil')        # Creating labels for village values of Resources         self.label_vwater = Label(position = resize_pos((190.0,140.0),(800.0,600.0),self.win.size), parent = self.win, text = str(int(Water.get_vquantity())), style = labelstyle1)        self.label_vbuildmat = Label(position = self.win.nextPosition(resize_pt_y(7)), parent = self.win, text = str(int(Buildmat.get_vquantity())), style = labelstyle1)        self.label_vtools = Label(position = self.win.nextPosition(resize_pt_y(7)), parent = self.win, text = str(int(Tools.get_vquantity())), style = labelstyle1)        self.label_vbooks = Label(position = self.win.nextPosition(resize_pt_y(7)), parent = self.win, text = str(int(Book.get_vquantity())), style = labelstyle1)        self.label_vmedicine = Label(position = self.win.nextPosition(resize_pt_y(7)), parent = self.win, text = str(int(Medicine.get_vquantity())), style = labelstyle1)        self.label_vrice = Label(position = self.win.nextPosition(resize_pt_y(7)), parent = self.win, text = str(int(Rice.get_vquantity())), style = labelstyle1)        self.label_vwheat = Label(position = self.win.nextPosition(resize_pt_y(7)), parent = self.win, text = str(int(Wheat.get_vquantity())), style = labelstyle1)        self.label_vbeans = Label(position = self.win.nextPosition(resize_pt_y(7)), parent = self.win, text = str(int(Beans.get_vquantity())), style = labelstyle1)        self.label_vsugar = Label(position = self.win.nextPosition(resize_pt_y(7)), parent = self.win, text = str(int(Sugar.get_vquantity())), style = labelstyle1)        self.label_vsalt = Label(position = self.win.nextPosition(resize_pt_y(7)), parent = self.win, text = str(int(Salt.get_vquantity())), style = labelstyle1)        self.label_voil = Label(position = self.win.nextPosition(resize_pt_y(7)), parent = self.win, text = str(int(Oil.get_vquantity())), style = labelstyle1)        # Creating labels for prices of Resources         self.price_vwater = Label(position = resize_pos((280.0,140.0),(800.0,600.0),self.win.size), parent = self.win, text = str(int(Water.get_price())), style = labelstyle1)        self.price_vbuildmat = Label(position = self.win.nextPosition(resize_pt_y(7)), parent = self.win, text = str(int(Buildmat.get_price())), style = labelstyle1)        self.price_vtools = Label(position = self.win.nextPosition(resize_pt_y(7)), parent = self.win, text = str(int(Tools.get_price())), style = labelstyle1)        self.price_vbooks = Label(position = self.win.nextPosition(resize_pt_y(7)), parent = self.win, text = str(int(Book.get_price())), style = labelstyle1)        self.price_vmedicine = Label(position = self.win.nextPosition(resize_pt_y(7)), parent = self.win, text = str(int(Medicine.get_price())), style = labelstyle1)        self.price_vrice = Label(position = self.win.nextPosition(resize_pt_y(7)), parent = self.win, text = str(int(Rice.get_price())), style = labelstyle1)        self.price_vwheat = Label(position = self.win.nextPosition(resize_pt_y(7)), parent = self.win, text = str(int(Wheat.get_price())), style = labelstyle1)        self.price_vbeans = Label(position = self.win.nextPosition(resize_pt_y(7)), parent = self.win, text = str(int(Beans.get_price())), style = labelstyle1)        self.price_vsugar = Label(position = self.win.nextPosition(resize_pt_y(7)), parent = self.win, text = str(int(Sugar.get_price())), style = labelstyle1)        self.price_vsalt = Label(position = self.win.nextPosition(resize_pt_y(7)), parent = self.win, text = str(int(Salt.get_price())), style = labelstyle1)        self.price_voil = Label(position = self.win.nextPosition(resize_pt_y(7)), parent = self.win, text = str(int(Oil.get_price())), style = labelstyle1)        # Creating labels for name of Resources for the market        self.water_label = Label(position = resize_pos((520.0,140.0),(800.0,600.0),self.win.size), parent = self.win, style = labelstyle1, text = 'Water')        self.buildmat_label = Label(position = self.win.nextPosition(resize_pt_y(7)), parent = self.win, style = labelstyle1, text = 'Building Materials')        self.tools_label = Label(position = self.win.nextPosition(resize_pt_y(7)), parent = self.win, style = labelstyle1, text = 'Tools')        self.books_label = Label(position = self.win.nextPosition(resize_pt_y(7)), parent = self.win, style = labelstyle1, text = 'Books')        self.medicine_label = Label(position = self.win.nextPosition(resize_pt_y(7)), parent = self.win, style = labelstyle1, text = 'Medicines')        self.rice_label = Label(position = self.win.nextPosition(resize_pt_y(7)), parent = self.win, style = labelstyle1, text = 'Rice')        self.wheat_label = Label(position = self.win.nextPosition(resize_pt_y(7)), parent = self.win, style = labelstyle1, text = 'Fruit & Vegatables')        self.beans_label = Label(position = self.win.nextPosition(resize_pt_y(7)), parent = self.win, style = labelstyle1, text = 'Beans')        self.sugar_label = Label(position = self.win.nextPosition(resize_pt_y(7)), parent = self.win, style = labelstyle1, text = 'Sugar')        self.salt_label = Label(position = self.win.nextPosition(resize_pt_y(7)), parent = self.win, style = labelstyle1, text = 'Salt')        self.oil_label = Label(position = self.win.nextPosition(resize_pt_y(7)), parent = self.win, style = labelstyle1, text = 'Oil')        # Creating labels for market values of Resources         self.label_mwater = Label(position = resize_pos((700.0,140.0),(800.0,600.0),self.win.size), parent = self.win, text = str(int(Water.get_mquantity())), style = labelstyle1)        self.label_mbuildmat = Label(position = self.win.nextPosition(resize_pt_y(7)), parent = self.win, text = str(int(Buildmat.get_mquantity())), style = labelstyle1)        self.label_mtools = Label(position = self.win.nextPosition(resize_pt_y(7)), parent = self.win, text = str(int(Tools.get_mquantity())), style = labelstyle1)        self.label_mbooks = Label(position = self.win.nextPosition(resize_pt_y(7)), parent = self.win, text = str(int(Book.get_mquantity())), style = labelstyle1)        self.label_mmedicine = Label(position = self.win.nextPosition(resize_pt_y(7)), parent = self.win, text = str(int(Medicine.get_mquantity())), style = labelstyle1)        self.label_mrice = Label(position = self.win.nextPosition(resize_pt_y(7)), parent = self.win, text = str(int(Rice.get_mquantity())), style = labelstyle1)        self.label_mwheat = Label(position = self.win.nextPosition(resize_pt_y(7)), parent = self.win, text = str(int(Wheat.get_mquantity())), style = labelstyle1)        self.label_mbeans = Label(position = self.win.nextPosition(resize_pt_y(7)), parent = self.win, text = str(int(Beans.get_mquantity())), style = labelstyle1)        self.label_msugar = Label(position = self.win.nextPosition(resize_pt_y(7)), parent = self.win, text = str(int(Sugar.get_mquantity())), style = labelstyle1)        self.label_msalt = Label(position = self.win.nextPosition(resize_pt_y(7)), parent = self.win, text = str(int(Salt.get_mquantity())), style = labelstyle1)        self.label_moil = Label(position = self.win.nextPosition(resize_pt_y(7)), parent = self.win, text = str(int(Oil.get_mquantity())), style = labelstyle1)        # Creating a textbox to enter the quantity to buy or sell        textbox_style = gui.defaultTextBoxStyle.copy()        textbox_style['font'] = myfont2        textbox_style['font-color'] = self.rect_color        self.label_quantity = Label(position = resize_pos((360.0,150.0),(800.0,600.0),self.win.size), parent = self.win, text = ' Quantity ', style = labelstyle1)        self.win.textbox = TextBox(position = resize_pos((350.0, 200.0),(800.0,600.0),self.win.size), size = resize_pos((100,20),(800.0,600.0),self.win.size), parent = self.win, style = textbox_style)        # Creating buttons for buying and selling and closing the window        button_style = gui.defaultButtonStyle.copy()        button_style['font'] = myfont2        self.button_buy = Button(position = resize_pos((370.0,280.0),(800.0,600.0),size_win), size = resize_pos((70.0,50.0),(800.0,600.0),size_win), parent = self.win, text = " Buy ",style = button_style)        self.button_sell = Button(position = resize_pos((370.0,330.0),(800.0,600.0),size_win), size = resize_pos((70.0,50.0),(800.0,600.0),size_win), parent = self.win, text = " Sell ",style = button_style)        self.button_close = Button(position = resize_pos((650.0,500.0),(800.0,600.0),size_win), size = resize_pos((120.0,50.0),(800.0,600.0),size_win), parent = self.win, text = "Close",style = button_style)        self.button_buy.onClick = self.buy_resources        self.button_sell.onClick = self.sell_resources        self.button_close.onClick  = self.close_win        # Creating label to display the status messages        #  Creating Custom label style        labelStyleCopy = gui.defaultLabelStyle.copy()        labelStyleCopy['border-width'] = 1        labelStyleCopy['wordwrap'] = True        labelStyleCopy['autosize'] = False        labelStyleCopy['font'] = myfont2        labelStyleCopy['font-color'] = self.rect_color        labelStyleCopy['border-color'] = self.color_grey        text = 'Welcome to the market of SHEYLAN, where you can trade resources. Select which item you would like to buy or sell on the left-hand column, enter the amount, and then choose buy or sell'        self.message_label = Label(position = resize_pos((80,470),(800.0,600.0),self.win.size),size = resize_pos((500,100),(800.0,600.0),self.win.size), parent = self.win, text = text, style = labelStyleCopy)    def buy_resources(self,button):        ''' Initiated for doing the transaction of buying the resources         '''        # Checking whether the user has entered the value in text box properly        text = self.win.textbox.text        try:            quantity = int(float(text))            if quantity == 0:                self.message_label.text = 'Please Enter the quantity for buying or selling'                return        except:            self.message_label.text = 'Please Enter a number as the quantity for buying or selling'            return            # Checking whether the user has selected the appropriate option box for the resource or not, and do the appropriate action        if self.water_box.value:            label_text =  buy_res(Water,quantity)            if label_text == 'The Village has bought the resource you demanded':                self.label_vwater.text = str(int(Water.get_vquantity()))                self.label_mwater.text = str(int(Water.get_mquantity()))        elif self.buildmat_box.value:            label_text =  buy_res(Buildmat,quantity)            if label_text == 'The Village has bought the resource you demanded':                self.label_vbuildmat.text = str(int(Buildmat.get_vquantity()))                self.label_mbuildmat.text = str(int(Buildmat.get_mquantity()))        elif self.tools_box.value:            label_text =  buy_res(Tools,quantity)            if label_text == 'The Village has bought the resource you demanded':                self.label_vtools.text = str(int(Tools.get_vquantity()))                self.label_mtools.text = str(int(Tools.get_mquantity()))        elif self.medicine_box.value:            label_text =  buy_res(Medicine,quantity)            if label_text == 'The Village has bought the resource you demanded':                self.label_vmedicine.text = str(int(Medicine.get_vquantity()))                self.label_mmedicine.text = str(int(Medicine.get_mquantity()))        elif self.books_box.value:            label_text =  buy_res(Book,quantity)            if label_text == 'The Village has bought the resource you demanded':                self.label_vbooks.text = str(int(Book.get_vquantity()))                self.label_mbooks.text = str(int(Book.get_mquantity()))        elif self.rice_box.value:            label_text =  buy_res(Rice,quantity)            if label_text == 'The Village has bought the resource you demanded':                self.label_vrice.text = str(int(Rice.get_vquantity()))                self.label_mrice.text = str(int(Rice.get_mquantity()))        elif self.wheat_box.value:            label_text =  buy_res(Wheat,quantity)            if label_text == 'The Village has bought the resource you demanded':                self.label_vwheat.text = str(int(Wheat.get_vquantity()))                self.label_mwheat.text = str(int(Wheat.get_mquantity()))        elif self.beans_box.value:            label_text =  buy_res(Beans,quantity)            if label_text == 'The Village has bought the resource you demanded':                self.label_vbeans.text = str(int(Beans.get_vquantity()))                self.label_mbeans.text = str(int(Beans.get_mquantity()))        elif self.sugar_box.value:            label_text =  buy_res(Sugar,quantity)            if label_text == 'The Village has bought the resource you demanded':                self.label_vsugar.text = str(int(Sugar.get_vquantity()))                self.label_msugar.text = str(int(Sugar.get_mquantity()))        elif self.salt_box.value:            label_text =  buy_res(Salt,quantity)            if label_text == 'The Village has bought the resource you demanded':                self.label_vsalt.text = str(int(Salt.get_vquantity()))                self.label_msalt.text = str(int(Salt.get_mquantity()))        elif self.oil_box.value:            label_text =  buy_res(Oil,quantity)            if label_text == 'The Village has bought the resource you demanded':                self.label_voil.text = str(int(Oil.get_vquantity()))                self.label_moil.text = str(int(Oil.get_mquantity()))        else:            label_text = ' Please select a Resource for Trading'        self.message_label.text = label_text        self.win.textbox.text = ''    def sell_resources(self,button):        ''' Initiated for doing the transaction of buying the resources         '''        # Checking whether the user has entered the value in text box properly        text = self.win.textbox.text        try:            quantity = int(float(text))            if quantity == 0:                self.message_label.text = 'Please Enter the quantity for buying or selling'                return        except:            self.message_label.text = 'Please Enter a number as the quantity for buying or selling'            return            # Checking whether the user has selected the appropriate option box for the resource or not, and do the appropriate action        if self.water_box.value:            label_text =  sell_res(Water,quantity)            if label_text == 'The Village has sold the resource you demanded':                self.label_vwater.text = str(int(Water.get_vquantity()))                self.label_mwater.text = str(int(Water.get_mquantity()))        elif self.buildmat_box.value:            label_text =  sell_res(Buildmat,quantity)            if label_text == 'The Village has sold the resource you demanded':                self.label_vbuildmat.text = str(int(Buildmat.get_vquantity()))                self.label_mbuildmat.text = str(int(Buildmat.get_mquantity()))        elif self.tools_box.value:            label_text =  sell_res(Tools,quantity)            if label_text == 'The Village has sold the resource you demanded':                self.label_vtools.text = str(int(Tools.get_vquantity()))                self.label_mtools.text = str(int(Tools.get_mquantity()))        elif self.medicine_box.value:            label_text =  sell_res(Medicine,quantity)            if label_text == 'The Village has sold the resource you demanded':                self.label_vmedicine.text = str(int(Medicine.get_vquantity()))                self.label_mmedicine.text = str(int(Medicine.get_mquantity()))        elif self.books_box.value:            label_text =  sell_res(Book,quantity)            if label_text == 'The Village has sold the resource you demanded':                self.label_vbooks.text = str(int(Book.get_vquantity()))                self.label_mbooks.text = str(int(Book.get_mquantity()))        elif self.rice_box.value:            label_text =  sell_res(Rice,quantity)            if label_text == 'The Village has sold the resource you demanded':                self.label_vrice.text = str(int(Rice.get_vquantity()))                self.label_mrice.text = str(int(Rice.get_mquantity()))        elif self.wheat_box.value:            label_text =  sell_res(Wheat,quantity)            if label_text == 'The Village has sold the resource you demanded':                self.label_vwheat.text = str(int(Wheat.get_vquantity()))                self.label_mwheat.text = str(int(Wheat.get_mquantity()))        elif self.beans_box.value:            label_text =  sell_res(Beans,quantity)            if label_text == 'The Village has sold the resource you demanded':                self.label_vbeans.text = str(int(Beans.get_vquantity()))                self.label_mbeans.text = str(int(Beans.get_mquantity()))        elif self.sugar_box.value:            label_text =  sell_res(Sugar,quantity)            if label_text == 'The Village has sold the resource you demanded':                self.label_vsugar.text = str(int(Sugar.get_vquantity()))                self.label_msugar.text = str(int(Sugar.get_mquantity()))        elif self.salt_box.value:            label_text =  sell_res(Salt,quantity)            if label_text == 'The Village has sold the resource you demanded':                self.label_vsalt.text = str(int(Salt.get_vquantity()))                self.label_msalt.text = str(int(Salt.get_mquantity()))        elif self.oil_box.value:            label_text =  sell_res(Oil,quantity)            if label_text == 'The Village has sold the resource you demanded':                self.label_voil.text = str(int(Oil.get_vquantity()))                self.label_moil.text = str(int(Oil.get_mquantity()))        else:            label_text = ' Please select a Resource for Trading'        self.message_label.text = label_text        self.win.textbox.text = ''# Functions and clases for natural calamitiesclass Earthquake(pygame.sprite.Sprite):    def __init__(self):        pygame.sprite.Sprite.__init__(self)        mask= pygame.surface.Surface((1200,560),SRCALPHA)        mask.fill((0,0,0))        mask.set_alpha(0)        self.alpha = 0        self.image = mask        self.rect = self.image.get_rect()        self.rect.move((0,0))        self.counter = 0        self.prev_disp = (0,0)        self.move_dir = [(-20,-20),(-20,-10),(-20,0),(-20,10),(-20,20),(-10,-20),(-10,-20),(-10,0),(-10,10),(-10,20),(0,-20),(0,-10),(0,0),(0,10),(0,20),(10,-20),(10,-20),(10,0),(10,10),(10,20),(20,-20),(20,-10),(20,0),(20,10),(20,20)]        # To close all open windows        if gui_obj.get_child_win_flag():            escape()            escape()        elif gui_obj.get_win_flag():            escape()    def update(self):        global Hospital         global House        global School        global Workshop        global ppl        self.counter +=1        if self.counter <50:            transform_obj.move_free((-self.prev_disp[0],-self.prev_disp[1]))            self.prev_disp = self.move_dir[int(random.random()*25)]            transform_obj.move_free(self.prev_disp)        if self.counter >20 and self.counter <50:            self.alpha +=8            self.image.set_alpha(self.alpha)        if self.counter==40:            display_text = ' Your Village Sheylan has ben hit by an Earthquake'            message.push_message(display_text,'high')        if self.counter == 80:            display_earthquake_images()            demolish_facility('Hospital')            demolish_facility('House')            demolish_facility('House')            demolish_facility('House')            demolish_facility('School')            demolish_facility('Workshop')            ppl.change_total_population(-10)        if self.counter > 81:            if self.alpha >2:                self.alpha -=2            self.image.set_alpha(self.alpha)        if self.counter >180:            natural_calamities.remove(earthquake)def display_earthquake_images():    image1 = pygame.image.load(os.path.join('data', 'earthquake1.png')).convert()    screen.blit(pygame.transform.scale(image1,new_screen_size),(0,0))    pygame.display.flip()    sleep(3)    image2 = pygame.image.load(os.path.join('data', 'earthquake2.png')).convert()    screen.blit(pygame.transform.scale(image2,new_screen_size),(0,0))    pygame.display.flip()    sleep(3)    image3 = pygame.image.load(os.path.join('data', 'earthquake3.png')).convert()    screen.blit(pygame.transform.scale(image3,new_screen_size),(0,0))    pygame.display.flip()    sleep(3)earthquake = None    def earthquake():    ''' This method needs to be called when there is an earthquake in the     village, it decreases the number of installations of some facilities and     also reduce the population    '''    global earthquake    earthquake  = Earthquake()    natural_calamities.add(earthquake)# Function to load sounddef load_sound(name):        if not pygame.mixer:        return NoneSound()    fullname = os.path.join(name)    try:        sound = pygame.mixer.Sound(fullname)    except pygame.error, message:        raise SystemExit, message    return sound# Function to react to the escape keydef escape():    win_flag = gui_obj.get_win_flag()    child_win_flag = gui_obj.get_child_win_flag()    if child_win_flag:        gui_obj.close_child_win()    elif win_flag:        gui_obj.close_win()    else:        safe_exit()    def safe_exit():    soundtrack.stop()    pygame.mixer.quit()    pygame.quit()    exit()   clock = pygame.time.Clock()# For initialising the style of the guidefaultStyle.init(gui)# Initialisation of GUI elements with the desktopdesktop = Desktop()# Creatin an object of gui buttons for the guigui_obj = Nonesoundtrack = load_sound(os.path.join('data', 'soundtrack.ogg'))    def main():    global gui_obj    # Displaying the WFP logo    intro_thread = threading.Thread(target = load_images, args=[])    intro_thread.start()    # Loading and starting the sound play    #soundtrack.play(-1)    # ------- introduction display() ---------------------#        screen.fill((255,255,255))    hunger_map = pygame.image.load(os.path.join('data', 'hunger_map.png')).convert()    hunger_map =  pygame.transform.scale(hunger_map,new_screen_size)    screen.blit(hunger_map,resize_pos((0,0)))        # Window custom style    myfont = pygame.font.Font("font.ttf", resize_pt(28))    win_style = gui.defaultWindowStyle.copy()    win_style['font'] = myfont    win_style['font-color'] = (255,255,255)    win_style['bg-color'] = (0,0,0)    position_win =resize_pos((200.0,50.0))    size_win =resize_pos((800.0,600.0))    win = Window(position = position_win, size = size_win, parent = desktop, text = " FOODFORCE: ESCAPING POVERTY  " ,style = win_style,shadeable = False, closeable = False)    run = True    win.surf.set_alpha(100)    myfont2 = pygame.font.Font("font.ttf",resize_pt(23))    labelstyle1 = gui.defaultLabelStyle.copy()    labelstyle1['border-width'] = 0    labelstyle1['wordwrap'] = False    labelstyle1['autosize'] = True    labelstyle1['font'] = myfont2    labelstyle1['font-color'] = (255,255,255)        counter = 0    label = Label(position = resize_pos((10.0,130.0),(800.0,600.0),win.size), parent = win, text = '', style = labelstyle1)        threades.global_time = 0    while run:            for e in gui.setEvents(pygame.event.get()):            if e.type == pygame.QUIT:                safe_exit()                if e.type == KEYDOWN:                if e.key == 27:  # For escape key                    run = False                label.text =  trailer_text[counter]        if threades.global_time >= 5000:            threades.global_time = 0            counter += 1        screen.fill((255,255,255))        screen.blit(hunger_map,resize_pos((0,0)))         desktop.update()        desktop.draw()        pygame.display.flip()        if counter == 8:           run = False        threades.iteration_time = clock.tick()        threades.global_time += threades.iteration_time    win.close()        #------------ End of intro_text-----------------------------#            # ------- Instructions Display---------------------#        screen.fill((255,255,255))    hunger_map = pygame.image.load(os.path.join('data', 'wfp_work.png')).convert()    hunger_map =  pygame.transform.scale(hunger_map,new_screen_size)    screen.blit(hunger_map,resize_pos((0,0)))        # Window custom style    myfont = pygame.font.Font("font.ttf", resize_pt(28))    win_style = gui.defaultWindowStyle.copy()    win_style['font'] = myfont    win_style['font-color'] = (255,255,255)    win_style['bg-color'] = (0,0,0)    position_win =resize_pos((200.0,50.0))    size_win =resize_pos((800.0,600.0))    win = Window(position = position_win, size = size_win, parent = desktop, text = " FOODFORCE: INSTRUCTIONS  " ,style = win_style,shadeable = False, closeable = False)    run = True    win.surf.set_alpha(160)    myfont2 = pygame.font.Font("font.ttf",resize_pt(18))    labelstyle1 = gui.defaultLabelStyle.copy()    labelstyle1['border-width'] = 0    labelstyle1['wordwrap'] = False    labelstyle1['autosize'] = True    labelstyle1['font'] = myfont2    labelstyle1['font-color'] = (255,255,255)        counter = 0    label = Label(position = resize_pos((10.0,130.0),(800.0,600.0),win.size), parent = win, text = '', style = labelstyle1)        threades.global_time = 0    while run:            for e in gui.setEvents(pygame.event.get()):            if e.type == pygame.QUIT:                safe_exit()                if e.type == KEYDOWN:                if e.key == 27:  # For escape key                    run = False                label.text =  instruction_text[counter]        if threades.global_time >= 17000:            threades.global_time = 0            counter += 1        screen.fill((255,255,255))        screen.blit(hunger_map,resize_pos((0,0)))         desktop.update()        desktop.draw()        pygame.display.flip()        if counter == 8:           run = False        threades.iteration_time = clock.tick()        threades.global_time += threades.iteration_time    win.close()        #------------ End of Instructions Display-----------------------------#        wfp_logo = pygame.image.load(os.path.join('data', 'top.png')).convert()    intro_thread.join()    initialize_facilities()    #surface_middle = pygame.transform.scale(surface3,resize_pos((1200,560)))    surface_top = pygame.transform.scale(wfp_logo,resize_pos((1200,40)))            gui_obj = gui_buttons()    screen.fill((0,0,0))    panel = display_panel(screen)    animation_obj = Animation()    animation_obj.update()    # Starting of the threads    update_thread = threading.Thread(target = threades.update_turn, args=[]).start()    message_thread = threading.Thread(target = message_window, args=[]).start()    # The main infinite loop    while True:        #clock.tick()                    pygame.display.set_caption(str(int(clock.get_fps())))        for e in gui.setEvents(pygame.event.get()):            if e.type == pygame.QUIT:                safe_exit()                        if e.type == QUIT:                safe_exit()            if e.type == KEYDOWN:                if e.key == 27:  # For escape key                    escape()                if e.key == K_UP:                    transform_obj.start_move('up')                if e.key == K_DOWN:                    transform_obj.start_move('down')                if e.key == K_LEFT:                    transform_obj.start_move('left')                if e.key == K_RIGHT:                    transform_obj.start_move('right')                if e.key == K_f or e.key == 61:                    transform_obj.focus()                if e.key == K_d or e.key == 45:                    transform_obj.defocus()                                    win_flag = gui_obj.get_win_flag()                if not win_flag:                    if e.key == K_s:                       gui_obj.setup()                    if e.key == K_u:                       gui_obj.upgrade()                    if e.key == K_b:                       gui_obj.buysell()                    if e.key == K_e:                       earthquake()            if e.type == KEYUP:                if e.key == K_UP:                    transform_obj.stop_move('up')                if e.key == K_DOWN:                    transform_obj.stop_move('down')                if e.key == K_LEFT:                    transform_obj.stop_move('left')                if e.key == K_RIGHT:                    transform_obj.stop_move('right')            x,y = pygame.mouse.get_pos()            r = pygame.Rect(resize_rect((0,40,1200,560)))            if r.collidepoint(x,y):                if e.type == MOUSEMOTION:                    if e.buttons == (1,0,0):                        transform_obj.move_mouse(e.rel)                if e.type == MOUSEBUTTONDOWN:                    if e.button == 4:                        transform_obj.focus()                    if e.button == 5:                        transform_obj.defocus()        #pygame.draw.rect(screen,(209,169,106),resize_rect((0,40,1200,560)))                animation_obj.update()                # For top surface        screen.blit(surface_top,(0,0))                # For middle surface        #surface_middle = pygame.transform.scale(surface3,resize_pos((1200,560)))        #screen.blit(surface_middle,resize_pos((0,40)))                # For bottom surface        pygame.draw.rect(screen,(0,0,0),resize_rect((0,600,1200,300)))                                panel.update(screen)                    desktop.update()                    desktop.draw()        pygame.display.update()                threades.iteration_time = clock.tick()        threades.global_time += threades.iteration_timeif __name__ == '__main__':     main()    