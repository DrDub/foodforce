import pygame
from pygame.locals import *
from sys import exit
from time import *
from threades import *
pygame.init()
import threading


surface_color = (90,50,255)
update_thread = threading.Thread(target = update_turn, args=[]).start()

def blend_color(color1, color2, blend_factor):
    red1, green1, blue1 = color1
    red2, green2, blue2 = color2
    red = red1+(red2-red1)*blend_factor
    green = green1+(green2-green1)*blend_factor
    blue = blue1+(blue2-blue1)*blend_factor
    
    return (int(red), int(green), int(blue))


class bar:
    
    color_bar = (47,47,255)
    
    def __init__(self, surface, x_value, y_value):
        ''' Draws a bar on the surface at posn x,y
        '''
        self.x = x_value
        self.y = y_value
        pygame.draw.rect(surface,self.color_bar,(self.x,self.y,160,15),2)
        pygame.draw.rect(surface,(255,255,255),(self.x+2,self.y+2,156,11))

        
        
    def update_value(self,surface,value):
        '''Updates the value of the bar
        '''
        
        max_value = 100.0
        max_pixel = 156.0
        red = (255,57,57)
        green = (90,255,90)
        colour = blend_color(red,green,value/max_value)
        pygame.draw.rect(surface,colour,(self.x+2,self.y+2,value/max_value*max_pixel,11))
        pygame.draw.rect(surface,(255,255,255),(self.x+2+value/max_value*max_pixel,self.y+2,max_pixel-value/max_value*max_pixel,11))

 
        
        
        
        
        
class indicator:
    rect_color = (47,47,255)
    
    def __init__(self,surface):
        ''' Draws the indicator panel on the surface
        '''
        myfont1 = pygame.font.SysFont("arial", 40)   # For main heading
        myfont2 = pygame.font.SysFont("arial", 25)   # For indicators name
        myfont3 = pygame.font.SysFont("arial", 25)    # for indicator value
        
        # Drawing main Indicator rectangle
        pygame.draw.rect(surface,self.rect_color,(768,0,256,36),4)
        text_surface1 = myfont1.render("Indicators",True,self.rect_color,(0,0,0))
        surface.blit(text_surface1,(850,6))
        
        # Drawing all the indicators
        ind_namelist = (' Housing',' Nutrition',' Health',' Education',' Training')
        for i in range(5):
            
            pygame.draw.rect(surface,self.rect_color,(768,36+i*44,256,22),2)
            text_surface2 = myfont2.render(ind_namelist[i],True,self.rect_color,(0,0,0))
            surface.blit(text_surface2,(770,38+i*44))        
            pygame.draw.rect(surface,self.rect_color,(768,58+i*44,168,22),2)
            bar1 = bar(surface,772,62+i*44)
            bar1.update_value(surface,0)
            pygame.draw.rect(surface,self.rect_color,(936,58+i*44,88,22),2)
            text_surface3 = myfont3.render(str(0)+'%',True,self.rect_color,(0,0,0))
            surface.blit(text_surface3,(938,60+i*44))
            
    def update_value(self,surface,indicators_list):
        ''' Updates the values of all the indicators
        '''
        myfont3 = pygame.font.SysFont("arial", 25)
        for i in range(5):
            
            bar1 = bar(surface,772,62+i*44)
            bar1.update_value(surface,indicators_list[i].get_value())
            text_surface3 = myfont3.render(str(int(indicators_list[i].get_value()))+'%',True,self.rect_color,(0,0,0))
            surface.blit(text_surface3,(938,60+i*44))
            
    


screen = pygame.display.set_mode((1024,768),0,32)
screen.fill((255,255,255))


srf = pygame.surface.Surface((1024,256))
srf.fill((0,0,0))
ind = indicator(srf)

while True:
    ind.update_value(srf,indicators_list)
    screen.blit(srf,(0,0))
    pygame.display.update()
    for event in pygame.event.get():
        if event.type == QUIT:
            exit()
        if event.type == KEYDOWN:
            exit()
        

    
    
    
    
    
'''   
srf = pygame.surface.Surface(screen.get_size())
srf.fill((0,0,0))
pygame.draw.rect(srf,(47,47,255),(200,200,120,15),2)

for value in range(100):
    max_value = 100.0
    max_pixel = 116.0
    red = (255, 0 ,0)
    green = (0, 255, 0)
    colour = blend_color(red,green,value/max_value)
    pygame.draw.rect(srf,colour,(204,202,value/max_value*max_pixel,11))
    screen.blit(srf,(0,0))
    pygame.display.update()
    sleep(0.1)
'''


'''
well regardin wrk at my end, i have thought of making the view without using pgu and only through simple surfaces of pygame, this would make the code faster and the graphics more lively, and i wish to provide the buttons for setting up facilities, upgradin them, buy and sell operations, and when one clicks these bottons we can draw another surface on the main surface pausing the game and using pgu there for various operations, we can use constant labels over there, which we know how to do..
'''
