#! /usr/bin/env python
#
#   Author : Atul Aggarwal (atul.agg.del@gmail.com)
#   Date : 2/06/2008 
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#



import model             #contains all classes etc. used to model various objects  
import initial           #conatins initial values of variables to be assigned 
import Exceptions        #contains exceptions handler
import facilities        #various facilities constants 
import indicators        #various indicators constants  
#import view              #handling view by this 

#initialization of money 
Money=model.Money()

###########  initialization of facilities   ###############
#house
House=model.Facility('house',facilities.COST_HOUSE,facilities.COST_LEVEL_HOUSE,facilities.PROD_HOUSE,facilities.CONS_HOUSE,0,1)
#school
School=model.Facility('school',facilities.COST_SCHOOL,facilities.COST_LEVEL_SCHOOL,facilities.PROD_SCHOOL,facilities.CONS_SCHOOL,0,1)
#hospital
Hospital=model.Facility('hospital',facilities.COST_HOSPITAL,facilities.COST_LEVEL_HOSPITAL,facilities.PROD_HOSPITAL,facilities.CONS_HOSPITAL,0,1)
#farm
Farm=model.Facility('farm',facilities.COST_FARM,facilities.COST_LEVEL_FARM,facilities.PROD_FARM,facilities.CONS_FARM,0,1)
########  end of facility initialization    #############


########### initialization of resources   ###############
#water
Water=model.Resource('water',initial.INIT_WATER,initial.INIT_WATER,initial.COST_WATER)
#building material
Buildmat=model.Resource('buildmat',initial.INIT_BUILDMAT,initial.INIT_BUILDMAT,initial.COST_BUILDMAT)
#tools
Tools=model.Resource('tools',initial.INIT_TOOLS,initial.INIT_TOOLS,initial.COST_TOOLS)
#medicines
Medicine=model.Resource('medicine',initial.INIT_MEDICINE,initial.INIT_MEDICINE,initial.COST_MEDICINE)
#books
Book=model.Resource('book',initial.INIT_BOOKS,initial.INIT_BOOKS,initial.COST_BOOKS)
########  end of resources initialization    #############

########### initialization of indicators   ###############
#housing
Housing=model.Indicator('housing',initial.INIT_HOMES,indicators.PDICT_HOUSING)
#health
Health=model.Indicator('health',initial.INIT_HOMES,indicators.PDICT_HEALTH)
#education
Education=model.Indicator('education',initial.INIT_HOMES,indicators.PDICT_EDUCATION)
#nutrition
Nutrition=model.Indicator('nutrition',initial.INIT_HOMES,indicators.PDICT_NUTRITION)
#training
Training=model.Indicator('training',initial.INIT_HOMES,indicators.PDICT_TRAINING)
########  end of facility initialization    #############


###########  Facility testing  ########################
print '----------FACILITY TESTING-----------'

def facility_test(Fac):
#PURPOSE:testing of a facility instance
#INPUT:a facility instance
#RETURN:nothing
    print
    print '**',type(Fac).__name__,'**'
    print 'NAME:',Fac.get_name()
    print 'NUMBER:',Fac.get_number()
    print 'LEVEL:',Fac.get_level()
    print 'COST OF BUILDING:',Fac.get_cost_build()
    print 'COST OF BUILDING:',Fac.get_cost_inc_level()
    print 'CONSUMPTION:',Fac.get_cons_dict()
    print 'PRODUCTION:',Fac.get_prod_dict() 
    print 'REALTIVE INCREASE IN PRODUCTION WITH UPDATION:',Fac.get_level_incr_prod()
    print 'REALTIVE INCREASE IN CONSUMPTION WITH UPDATION:',Fac.get_level_incr_cons()

facility_test(House)   #house testing
facility_test(School)   #school testing 
facility_test(Hospital) #hospital testing
facility_test(Farm)     #farm testing

##operation testing


########  end of facility testing    #############

###########  Resources testing  ########################
print '-----------RESOURCES TESTING-----------'

def resource_test(Res):
#PURPOSE:testing of a resource instance
#INPUT:a resource instance
#RETURN:nothing
    print
    print '**',type(Res).__name__,'**'
    print 'NAME:',Res.get_name()
    print 'VILLAGE QUANTITY:',Res.get_vquantity()
    print 'MARKET QUANTITY:',Res.get_mquantity()
    print 'PRICE:',Res.get_price()

resource_test(Water)      #water testing
resource_test(Buildmat)   #building-material testing
resource_test(Tools)      #tools testing
resource_test(Medicine)   #medicine testing
resource_test(Book)       #books testing

##operation testing
print '*operations testing*'
#buy method testing
def buy_method(Res):
    print
    print 'checking buy method in',Res.get_name()
    print 'OLD VILLAGE QUANTITY IS:',Res.get_vquantity()
    print 'OLD MARKET QUNTITY IS:',Res.get_mquantity()
    qua=int(raw_input('QUANTITY TO PURCHASE:'))
    print 'cost of buying is :',Res.buy(qua,Money).get_money()
    print 'NEW VILLAGE QUANTITY IS:',Res.get_vquantity()
    print 'NEW MARKET QUNTITY IS:',Res.get_mquantity()
buy_method(Water)      #water
buy_method(Buildmat)   #building material
buy_method(Tools)      #tools
buy_method(Medicine)   #medicines
buy_method(Book)       #books 

#sell method testing
def sell_method(Res):
    print
    print 'checking sell method in',Res.get_name()
    print 'OLD VILLAGE QUANTITY IS:',Res.get_vquantity()
    print 'OLD MARKET QUNTITY IS:',Res.get_mquantity()
    qua=int(raw_input('QUANTITY TO SELL:'))
    print 'cost of selling is :',Res.sell(qua,money).get_money()
    print 'NEW VILLAGE QUANTITY IS:',Res.get_vquantity()
    print 'NEW MARKET QUNTITY IS:',Res.get_mquantity()
sell_method(Water)      #water
sell_method(Buildmat)   #building material
sell_method(Tools)      #tools
sell_method(Medicine)   #medicines
sell_method(Book)       #books 
    

########  end of resource testing    #############

###########  Indicators testing  ########################
print '-----------INDICATORS TESTING-----------'

def indicator_test(Ind):
#PURPOSE:testing of a indicator instance
#INPUT:an indicator instance
#RETURN:nothing
    print
    print '**',type(Ind).__name__,'**'
    print 'NAME:',Ind.get_name()
    print 'VALUE:',Ind.get_value()
    print 'PARAMETER DICTIONARY',Ind.get_parameters()

indicator_test(Housing)     #housing testing
indicator_test(Health)      #health testing
indicator_test(Education)   #education testing
indicator_test(Nutrition)   #nutrition testing
indicator_test(Training)    #training testing

########  end of indicator testing    #############

########### Money Testing ####################
print '-----------MONEY TESTING-----------'

def money_test(mon):
#PURPOSE:testing of money 
#INPUT:a money instance
#RETURN:nothing
    print 
    print 'MONEY=',mon.get_money()
money_test(Money)

##OPERATIONS TESTING
print '*operations testing*'
def money_method(mon):
#PURPOSE:testing of money mehods
#INPUT:a money instance
#RETURN:nothing        
    print 
    print 'INITIAL MONEY:',mon.get_money()
    change=int(raw_input('ENTER CHANGE IN MONEY YOU WANT:'))
    mon.change_money(change)
    print 'NEW MONEY:',mon.get_money()
money_method(Money)
########  end of Money testing    #############


    
