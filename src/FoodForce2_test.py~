#! /usr/bin/env python
#
#   Author : Atul Aggarwal (atul.agg.del@gmail.com)
#   Date : 2/06/2008 
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
#no_ppl=100
#no_ppl_home=4
#no_ppl_fed=4
#no_ppl_edu=4
#no_ppl_hos=5

import model             #contains all classes etc. used to model various objects  
import initial           #conatins initial values of variables to be assigned 
import Exceptions        #contains exceptions handler
import facilities        #various facilities constants 
import indicators        #various indicators constants  
from time import sleep,time,ctime
import thread            #for using threads
#import view             #handling view by this 

import test              #for testing(debugging) puposes 
#initialization of money 
money=model.Money()

###########  initialization of facilities   ###############
#house
House=model.Facility('HOUSE',facilities.COST_HOUSE,facilities.COST_LEVEL_HOUSE,facilities.PROD_HOUSE,facilities.CONS_HOUSE,0,1)
#school
School=model.Facility('SCHOOL',facilities.COST_SCHOOL,facilities.COST_LEVEL_SCHOOL,facilities.PROD_SCHOOL,facilities.CONS_SCHOOL,0,1)
#hospital
Hospital=model.Facility('HOSPITAL',facilities.COST_HOSPITAL,facilities.COST_LEVEL_HOSPITAL,facilities.PROD_HOSPITAL,facilities.CONS_HOSPITAL,0,1)
#farm
Farm=model.Facility('FARM',facilities.COST_FARM,facilities.COST_LEVEL_FARM,facilities.PROD_FARM,facilities.CONS_FARM,0,1)
########  end of facility initialization    #############


########### initialization of resources   ###############
#water
Water=model.Resource('WATER',initial.INIT_WATER,initial.INIT_WATER,initial.COST_WATER)
#building material
Buildmat=model.Resource('BUILDING    MATERIAL',initial.INIT_BUILDMAT,initial.INIT_BUILDMAT,initial.COST_BUILDMAT)
#tools
Tools=model.Resource('TOOLS',initial.INIT_TOOLS,initial.INIT_TOOLS,initial.COST_TOOLS)
#medicines
Medicine=model.Resource('MEDICINE',initial.INIT_MEDICINE,initial.INIT_MEDICINE,initial.COST_MEDICINE)
#books
Book=model.Resource('BOOK',initial.INIT_BOOKS,initial.INIT_BOOKS,initial.COST_BOOKS)
########  end of facility initialization    #############

########### initialization of indicators   ###############
#housing
Housing=model.Indicator('HOUSING',initial.INIT_HOMES,indicators.PDICT_HOUSING)
#health
Health=model.Indicator('HEALTH',initial.INIT_HOMES,indicators.PDICT_HOUSING)
#education
Education=model.Indicator('EDUCATION',initial.INIT_HOMES,indicators.PDICT_HOUSING)
#nutrition
Nutrition=model.Indicator('NUTRITION',initial.INIT_HOMES,indicators.PDICT_HOUSING)
#training
Training=model.Indicator('TRAINING',initial.INIT_HOMES,indicators.PDICT_HOUSING)
########  end of facility initialization    #############

ppl = model.People(100, 10, 10, 10, 10, 0, 0, 0, 0, 0)


########### Thread to be used   ###############
#####to be included later
def stop_facility(facility):
    facility.stop_facility()
    a=1
    while(a):
        a=0
        res_cost = facilities.FACILTIES_RES_DICT_CONS[facility.get_name()]
        for i in range(len(resources)):
            name = resources[i].get_name()
       	    if res_cost.has_key(name):
                if resource.get_vquantity() < res_cost[name]:
                    a=1

    facility.resume_facility()

##############################


resources=(Water,Buildmat,Tools,Medicine,Book)  #Resources list

############ BUILDING A FACILITY ###########
def build_facility(fac,res):
    try:
        resources=fac.build_start(res,ppl)
        ppl = facility_obj.update_manp_res(ppl)
    except Exceptions.Resources_Underflow_Exception:
        print 'you dont have enough resources to buld this facility'
    except Low_Manpower_Resources_Exception:
        print 'you dont have enough manpower'
    sleep(2)
    print 'drawing first phase of facility-',fac.get_name()
    sleep(2)
    print 'drawing second phase of facility-',fac.get_name()
    sleep(2)
    print 'drawing third phase of facility-',fac.get_name()
    sleep(2)
    print 'drawing fourth phase of facility-',fac.get_name()
    sleep(2)
    
    fac.build_end()
    print 'FACILITY MADE'    

#test.resource_test(Water)
#print 'INITIAL NUMBER OF HOUSE:',House.get_number()
#build_facility(House,resources)
#test.resource_test(Water)
#print 'AFTER UPGRADATION NEW NUMBER OF HOUSE:',House.get_number()

############ END OF BUILDING A FACILITY ###############


#############  BUYING A RESOURCE   ############
#def buy_res(res,quant,mon):
#    money=res.buy(quant,mon)

#print 'INITIAL MONEY:',test.money_test(money)

#re_user=raw_input('WHICH RESOURCE DO YOU WANT TO BUY:(enter in uppercase)')
#res_temp=resources[0]
#qunt=int(raw_input('ENTER QUANTITY YOU WANT TO PURCHASE'))

#for i in range(len(resources)):
#    if resources[i].get_name()==re_user:    
#        test.resource_test(resources[i])        
#        buy_res(resources[i],qunt,money)
#        test.resource_test(resources[i])
#        break

#print 'FINAL MONEY:',test.money_test(money)


############END OF BUYING A RESOURCE ###########
    

############## SELLING A RESOURCE  ##############
def sell_res(res,quant,mon):
    money=res.sell(quant,mon)
print 'INITIAL MONEY:',test.money_test(money)
re_user=raw_input('WHICH RESOURCE DO YOU WANT TO SELL:(enter in uppercase)')
res_temp=resources[0]
qunt=int(raw_input('ENTER QUANTITY YOU WANT TO PURCHASE'))    
for i in range(len(resources)):
    if resources[i].get_name()==re_user:    
        test.resource_test(resources[i])        
        sell_res(resources[i],qunt,money)
        test.resource_test(resources[i])
        break
print 'FINAL MONEY:',test.money_test(money)
############END OF SELLING A RESOURCE ###########


build_facility(House,resources)


      
        





    
