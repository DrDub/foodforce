import pygamefrom threades import *import osfrom pygame.locals import *from display_panel import focus_viewpygame.init()print 'animation view'class Spritesheet:    def __init__(self, filename):        self.sheet = pygame.image.load(os.path.join('data', filename)).convert()            def imgat(self, rect, colorkey = None):        rect = Rect(rect)        image = pygame.Surface(rect.size).convert()        image.blit(self.sheet, (0, 0), rect)        if colorkey is not None:            if colorkey is -1:                colorkey = image.get_at((0, 0))            image.set_colorkey(colorkey, RLEACCEL)        return image                def imgsat(self, rects, colorkey = None):        imgs = []        for rect in rects:            imgs.append(self.imgat(rect, colorkey))        return imgs                class Workshop_sprite(pygame.sprite.Sprite):        def __init__(self):        pygame.sprite.Sprite.__init__(self)        workshop_posn_list = [(200,500),(300,800),(200,500),(300,800),(200,500),(300,800),(200,500),(300,800)]        # Saving tiles of all the upgrades in tiles_list                self.tiles_list = []        ss = Spritesheet('workshop_upgrade0.png')                                            self.tiles = ss.imgsat([(   0, 0, 410, 496),( 420, 0,482, 496),( 906, 0, 484, 496),( 1440, 0, 415, 496),( 1890, 0, 392, 496)], -1)                self.tiles_list.append(self.tiles)                                                ss = Spritesheet('workshop_upgrade1.png')                                            self.tiles = ss.imgsat([( 0, 0, 420, 496),( 470, 0, 490, 496),( 1020, 0, 460, 496)], -1)                self.tiles_list.append(self.tiles)        ss = Spritesheet('workshop_upgrade2.png')                                            self.tiles = ss.imgsat([(   0, 0, 425, 496),( 434, 0, 477, 496),( 930, 0, 735, 496)], -1)                self.tiles_list.append(self.tiles)        ss = Spritesheet('workshop_upgrade3.png')                                            self.tiles = ss.imgsat([(   0, 0, 410, 496),( 410, 0, 450, 496),( 870, 0, 695, 496)], -1)                self.tiles_list.append(self.tiles)        self.frame = 0        self.level = Workshop.get_level()        self.built_flag = 0        self.image = self.tiles_list[self.level][self.frame]        self.rect = self.image.get_rect()        self.rect = self.rect.move(workshop_posn_list[Workshop.get_number()-1])        focus = focus_view()        focus.focus_at_pos(workshop_posn_list[Workshop.get_number()-1][0],workshop_posn_list[Workshop.get_number()-1][1])        self.counter = 0    def update(self):        if self.counter < 4:            self.counter += 1        else:            self.counter = 0                        if (self.frame >= 5 and self.level ==0) :                if (self.frame == 5 and built_flag == 0) :                    build_end_facility(Workshop)                    self.built_flag = 1            elif (self.frame >= 3 and self.level ==1) :                pass            elif (self.frame >= 3 and self.level ==2) :                pass            elif (self.frame >= 3 and self.level ==3) :                pass            else:                self.frame += 1                        self.image = self.tiles_list[self.level][self.frame]    def set_frame(self, frame):        self.frame = frame        self.image = self.tiles_list[self.level][self.frame]                    def upgrade_level(self):        self.level +=1        self.counter = 4        self.frame = 0  class House_sprite(pygame.sprite.Sprite):        def __init__(self):        pygame.sprite.Sprite.__init__(self)        house_posn_list = [(200,500),(300,800),(200,500),(300,800),(200,500),(300,800),(200,500),(300,800)]        # Saving tiles of all the upgrades in tiles_list                self.tiles_list = []        ss = Spritesheet('house_upgrade0.png')                                            self.tiles = ss.imgsat([(   0, 0, 317, 417),( 335, 0, 336, 417),( 684, 0, 335, 417),( 1030, 0, 340, 417),( 1390, 0, 319, 417)], -1)                self.tiles_list.append(self.tiles)                                                ss = Spritesheet('house_upgrade1.png')                                            self.tiles = ss.imgsat([(   0, 0, 300, 417),( 334, 0, 363, 417),( 707, 0, 350, 417)], -1)                self.tiles_list.append(self.tiles)        ss = Spritesheet('house_upgrade2.png')                                            self.tiles = ss.imgsat([(   0, 0, 310, 436),( 353, 0, 355, 436),( 718, 0, 531, 436)], -1)                self.tiles_list.append(self.tiles)        ss = Spritesheet('house_upgrade3.png')                                            self.tiles = ss.imgsat([(   0, 0, 307, 436),( 345, 0, 360, 436),( 710, 0, 528, 436)], -1)                self.tiles_list.append(self.tiles)        self.frame = 0        self.level = House.get_level()        self.built_flag = 0        self.image = self.tiles_list[self.level][self.frame]        self.rect = self.image.get_rect()        self.rect = self.rect.move(house_posn_list[House.get_number()-1])        focus = focus_view()        focus.focus_at_pos(house_posn_list[House.get_number()-1][0],house_posn_list[House.get_number()-1][1])        self.counter = 0    def update(self):        if self.counter < 4:            self.counter += 1        else:            self.counter = 0                        if (self.frame >= 5 and self.level ==0) :                if (self.frame == 5 and built_flag == 0) :                    build_end_facility(House)                    self.built_flag = 1            elif (self.frame >= 3 and self.level ==1) :                pass            elif (self.frame >= 3 and self.level ==2) :                pass            elif (self.frame >= 3 and self.level ==3) :                pass            else:                self.frame += 1                        self.image = self.tiles_list[self.level][self.frame]    def set_frame(self, frame):        self.frame = frame        self.image = self.tiles_list[self.level][self.frame]                    def upgrade_level(self):        self.level +=1        self.counter = 4        self.frame = 0        class Hospital_sprite(pygame.sprite.Sprite):        def __init__(self):        pygame.sprite.Sprite.__init__(self)        hospital_posn_list = [(200,500),(300,800),(200,500),(300,800),(200,500),(300,800),(200,500),(300,800)]        # Saving tiles of all the upgrades in tiles_list                self.tiles_list = []        ss = Spritesheet('hospital_upgrade0.png')                                            self.tiles = ss.imgsat([(   0, 0, 310, 474),( 325, 0, 374, 474),( 715, 0, 385, 474),( 1150, 0, 360, 474),( 1545, 0, 359, 474)], -1)                self.tiles_list.append(self.tiles)                                                ss = Spritesheet('hospital_upgrade1.png')                                            self.tiles = ss.imgsat([(   0, 0, 325, 474),( 380, 0, 370, 474),( 780, 0, 360, 474)], -1)                self.tiles_list.append(self.tiles)        ss = Spritesheet('hospital_upgrade2.png')                                            self.tiles = ss.imgsat([(   0, 0, 325, 474),( 350, 0, 375, 474),( 760, 0, 376, 474)], -1)                self.tiles_list.append(self.tiles)        ss = Spritesheet('hospital_upgrade3.png')                                            self.tiles = ss.imgsat([(   0, 0, 325, 474),( 350, 0, 380, 474),( 770, 0, 366, 474)], -1)                self.tiles_list.append(self.tiles)        self.frame = 0        self.level = Hospital.get_level()        self.built_flag = 0        self.image = self.tiles_list[self.level][self.frame]        self.rect = self.image.get_rect()        self.rect = self.rect.move(hospital_posn_list[Hospital.get_number()-1])        focus = focus_view()        focus.focus_at_pos(hospital_posn_list[Hospital.get_number()-1][0],hospital_posn_list[Hospital.get_number()-1][1])        self.counter = 0    def update(self):        if self.counter < 4:            self.counter += 1        else:            self.counter = 0                        if (self.frame >= 5 and self.level ==0) :                if (self.frame == 5 and built_flag == 0) :                    build_end_facility(Hospital)                    self.built_flag = 1            elif (self.frame >= 3 and self.level ==1) :                pass            elif (self.frame >= 3 and self.level ==2) :                pass            elif (self.frame >= 3 and self.level ==3) :                pass            else:                self.frame += 1                        self.image = self.tiles_list[self.level][self.frame]    def set_frame(self, frame):        self.frame = frame        self.image = self.tiles_list[self.level][self.frame]                    def upgrade_level(self):        self.level +=1        self.counter = 4        self.frame = 0                class School_sprite(pygame.sprite.Sprite):        def __init__(self):        pygame.sprite.Sprite.__init__(self)        school_posn_list = [(200,500),(300,800),(200,500),(300,800),(200,500),(300,800),(200,500),(300,800)]        # Saving tiles of all the upgrades in tiles_list                self.tiles_list = []        ss = Spritesheet('school_upgrade0.png')                                            self.tiles = ss.imgsat([( 0, 0, 420, 486),( 465, 0, 450, 486),( 925, 0, 480, 486),( 1410, 0, 480, 486),( 1900, 0, 475, 486)], -1)                self.tiles_list.append(self.tiles)                                                ss = Spritesheet('school_upgrade1.png')                                            self.tiles = ss.imgsat([( 0, 0, 425, 486),( 485, 0, 470, 486),( 1050, 0, 477, 486)], -1)                self.tiles_list.append(self.tiles)        ss = Spritesheet('school_upgrade2.png')                                            self.tiles = ss.imgsat([( 0, 0, 418, 486),( 480, 0, 475, 486),( 1040, 0, 486, 486)], -1)                self.tiles_list.append(self.tiles)        ss = Spritesheet('school_upgrade3.png')                                            self.tiles = ss.imgsat([( 0, 0, 418, 486),( 480, 0, 475, 486),( 1040, 0, 486, 486)], -1)                self.tiles_list.append(self.tiles)        self.frame = 0        self.level = School.get_level()        self.built_flag =0        self.image = self.tiles_list[self.level][self.frame]        self.rect = self.image.get_rect()        self.rect = self.rect.move(school_posn_list[School.get_number()-1])        focus = focus_view()        focus.focus_at_pos(school_posn_list[School.get_number()-1][0],school_posn_list[School.get_number()-1][1])        self.counter = 0    def update(self):        if self.counter < 4:            self.counter += 1        else:            self.counter = 0                        if (self.frame >= 5 and self.level ==0) :                if (self.frame == 5 and built_flag == 0) :                    build_end_facility(School)                    self.built_flag = 1            elif (self.frame >= 3 and self.level ==1) :                pass            elif (self.frame >= 3 and self.level ==2) :                pass            elif (self.frame >= 3 and self.level ==3) :                pass            else:                self.frame += 1                        self.image = self.tiles_list[self.level][self.frame]    def set_frame(self, frame):        self.frame = frame        self.image = self.tiles_list[self.level][self.frame]                    def upgrade_level(self):        self.level +=1        self.counter = 4        self.frame = 0                class Farm_sprite(pygame.sprite.Sprite):        def __init__(self):        pygame.sprite.Sprite.__init__(self)        farm_posn_list = [(200,500),(300,800),(200,500),(300,800),(200,500),(300,800),(200,500),(300,800)]        # Saving tiles of all the upgrades in tiles_list                self.tiles_list = []        ss = Spritesheet('farm.png')                                            self.tiles = ss.imgsat([(   0, 0, 500, 500),( 516, 0, 480, 500),( 1000, 0, 516, 500)], -1)                self.tiles_list.append(self.tiles)                self.frame = 0        self.level = Farm.get_level()        self.built_flag = 0        self.image = self.tiles_list[self.level][self.frame]        self.rect = self.image.get_rect()        self.rect = self.rect.move(farm_posn_list[Farm.get_number()-1])        focus = focus_view()        focus.focus_at_pos(farm_posn_list[Farm.get_number()-1][0],farm_posn_list[Farm.get_number()-1][1])        self.counter = 0    def update(self):        if self.counter < 4:            self.counter += 1        else:            self.counter = 0                        if (self.frame >= 3 and self.level ==0) :                if (self.frame == 3 and built_flag == 0) :                    build_end_facility(Farm)                    self.built_flag = 1            else:                self.frame += 1                        self.image = self.tiles_list[self.level][self.frame]    def set_frame(self, frame):        self.frame = frame        self.image = self.tiles_list[self.level][self.frame]                    def upgrade_level(self):        pass    class Fountain_sprite(pygame.sprite.Sprite):        def __init__(self):        pygame.sprite.Sprite.__init__(self)        fountain_posn_list = [(200,500),(300,800),(200,500),(300,800),(200,500),(300,800),(200,500),(300,800)]        # Saving tiles of all the upgrades in tiles_list                self.tiles_list = []        ss = Spritesheet('fountain.png')                                            self.tiles = ss.imgsat([( 0, 0, 140, 192),( 150, 0, 115, 192),( 285, 0, 130, 192),( 435, 0, 197, 192)], -1)                self.tiles_list.append(self.tiles)                self.frame = 0        self.level = Fountain.get_level()        self.built_flag = 0        self.image = self.tiles_list[self.level][self.frame]        self.rect = self.image.get_rect()        self.rect = self.rect.move(fountain_posn_list[Fountain.get_number()-1])        focus = focus_view()        focus.focus_at_pos(fountain_posn_list[Fountain.get_number()-1][0],fountain_posn_list[Fountain.get_number()-1][1])        self.counter = 0    def update(self):        if self.counter < 4:            self.counter += 1        else:            self.counter = 0                        if (self.frame >= 4 and self.level ==0) :                if (self.frame == 4 and built_flag == 0) :                    build_end_facility(Fountain)                    self.built_flag = 1            else:                self.frame += 1                        self.image = self.tiles_list[self.level][self.frame]    def set_frame(self, frame):        self.frame = frame        self.image = self.tiles_list[self.level][self.frame]                    def upgrade_level(self):        passclass Environment(pygame.sprite.Sprite):        def __init__(self):        pygame.sprite.Sprite.__init__(self)        spritesheet = Spritesheet('tileset.png')        matrix = []        for i in range(9):            for j in range(12):                matrix.append((2+(j*50), 2+(i*50), 48, 48))        self.tiles = spritesheet.imgsat(matrix)                    def get_background(self):                background = pygame.Surface((9000,6000)).convert()        for x in range(188):            for y in range(125):                background.blit(self.tiles[6], (x*48, (y*48)))                             return background                class Build(pygame.sprite.Sprite):        def __init__(self, filename, colorkey, x, y):        pygame.sprite.Sprite.__init__(self)        self.image = pygame.image.load(os.path.join('data', filename)).convert()        if colorkey is not None:            if colorkey is -1:                colorkey = self.image.get_at((0, 0))            self.image.set_colorkey(colorkey, RLEACCEL)        self.rect = self.image.get_rect()        self.rect = self.rect.move(x, y)            def add_sprite_all(sprite):    sprite.add(all)        def add_sprite_facilities(sprite):    sprite.add(facilities_group)    class Animation:        def __init__(self):        self.animation_surface = pygame.surface.Surface((9000,6000))        env = Environment()        self.background = env.get_background()        self.animation_surface.blit(self.background,(0,0))        self.ratio = 0.2        self.pos_x = 0        self.pos_y = 0                all.draw(self.animation_surface)            def move_up(self):                self.pos_y -= 10                def move_down(self):                self.pos_y += 10                    def move_right(self):                self.pos_x += 10                def move_left(self):                self.pos_x -= 10            def check_pos(self):        if self.pos_x < 0:            self.pos_x = 0        if self.pos_x > (int(self.ratio*9000) - 1200):            self.pos_x = (int(self.ratio*9000) - 1200)            if self.pos_y < 0:            self.pos_y = 0        if self.pos_y > (int(self.ratio*6000) - 560):            self.pos_y = (int(self.ratio*6000) - 560)                    def focus(self):        ''' Used to focus or zoom in'''                self.ratio = self.ratio + 0.10        if self.ratio >= 1.0:            self.ratio = 1.0                def defocus(self):        ''' Used to defocus or zoom out'''        self.ratio = self.ratio - 0.10        if self.ratio <= 0.2:            self.ratio = 0.2        def focus_at(self,x,y):        '''Used to focus at a particular position'''        self.ratio = 0.5        self.pos_x = int(x*ratio) -200        self.pos_y = int(y*ratio) - 20            def update(self):        ''' Creates the final surface with the background and all and with the sprites too '''                global surface3                all.clear(self.animation_surface,self.background)        all.update()        all.draw(self.animation_surface)               self.check_pos()         resized_surface = pygame.surface.Surface((int(self.ratio*9000),int(self.ratio*6000)))        pygame.transform.scale(self.animation_surface, (int(self.ratio*9000),int(self.ratio*6000)), DestSurface = resized_surface)        sub_surface = resized_surface.subsurface((self.pos_x,self.pos_y,1200,560))        surface3.blit(sub_surface,(0,0))    # Sprites for Facilities and all the sprites   all = pygame.sprite.RenderUpdates() facilities_group = pygame.sprite.Group()market = pygame.sprite.Group()surface3 = pygame.surface.Surface((1200,560))